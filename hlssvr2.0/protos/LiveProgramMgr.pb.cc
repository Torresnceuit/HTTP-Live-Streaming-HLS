// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LiveProgramMgr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LiveProgramMgr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace liveprogrammgr_protos {

namespace {

const ::google::protobuf::Descriptor* ProgramInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgramInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SNotifyVideoStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SNotifyVideoStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProgramInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProgramInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProgramInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProgramInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoIdItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoIdItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllProgramVideoIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllProgramVideoIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllProgramVideoIdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllProgramVideoIdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VidInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VidInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* VidInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VidInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllProgramVidInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllProgramVidInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllProgramVideInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllProgramVideInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbProgramInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbProgramInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbModuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbModuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllDbProgramInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllDbProgramInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SUBCMD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VIDEO_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_CODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STREAM_FORMAT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LiveProgramMgr_2eproto() {
  protobuf_AddDesc_LiveProgramMgr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LiveProgramMgr.proto");
  GOOGLE_CHECK(file != NULL);
  ProgramInfo_descriptor_ = file->message_type(0);
  static const int ProgramInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramInfo, uiroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramInfo, uivideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramInfo, uimuxsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramInfo, uistreamformat_),
  };
  ProgramInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgramInfo_descriptor_,
      ProgramInfo::default_instance_,
      ProgramInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgramInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgramInfo));
  SNotifyVideoStatus_descriptor_ = file->message_type(1);
  static const int SNotifyVideoStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uistatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uiuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uiroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uimainroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uiroomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uivideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uiselfinternalip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uiselfexternalip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, uibitrate_),
  };
  SNotifyVideoStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SNotifyVideoStatus_descriptor_,
      SNotifyVideoStatus::default_instance_,
      SNotifyVideoStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SNotifyVideoStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SNotifyVideoStatus));
  GetProgramInfoReq_descriptor_ = file->message_type(2);
  static const int GetProgramInfoReq_offsets_[1] = {
  };
  GetProgramInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProgramInfoReq_descriptor_,
      GetProgramInfoReq::default_instance_,
      GetProgramInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProgramInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProgramInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProgramInfoReq));
  GetProgramInfoRsp_descriptor_ = file->message_type(3);
  static const int GetProgramInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProgramInfoRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProgramInfoRsp, programlist_),
  };
  GetProgramInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProgramInfoRsp_descriptor_,
      GetProgramInfoRsp::default_instance_,
      GetProgramInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProgramInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProgramInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProgramInfoRsp));
  VideoIdItem_descriptor_ = file->message_type(4);
  static const int VideoIdItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, programtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, uivideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, uiaccesstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, uicdntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, uimaxbandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, uitotalbandwidth_),
  };
  VideoIdItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoIdItem_descriptor_,
      VideoIdItem::default_instance_,
      VideoIdItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoIdItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoIdItem));
  GetAllProgramVideoIdReq_descriptor_ = file->message_type(5);
  static const int GetAllProgramVideoIdReq_offsets_[1] = {
  };
  GetAllProgramVideoIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllProgramVideoIdReq_descriptor_,
      GetAllProgramVideoIdReq::default_instance_,
      GetAllProgramVideoIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideoIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideoIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllProgramVideoIdReq));
  GetAllProgramVideoIdRsp_descriptor_ = file->message_type(6);
  static const int GetAllProgramVideoIdRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideoIdRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideoIdRsp, videoidlist_),
  };
  GetAllProgramVideoIdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllProgramVideoIdRsp_descriptor_,
      GetAllProgramVideoIdRsp::default_instance_,
      GetAllProgramVideoIdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideoIdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideoIdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllProgramVideoIdRsp));
  VidInfoItem_descriptor_ = file->message_type(7);
  static const int VidInfoItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uivideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uiaccesstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uicdntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uimaxbandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uitotalbandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uibitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uiwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uiheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, uifps_),
  };
  VidInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VidInfoItem_descriptor_,
      VidInfoItem::default_instance_,
      VidInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VidInfoItem));
  VidInfoList_descriptor_ = file->message_type(8);
  static const int VidInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoList, programtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoList, vidinfo_),
  };
  VidInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VidInfoList_descriptor_,
      VidInfoList::default_instance_,
      VidInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VidInfoList));
  GetAllProgramVidInfoReq_descriptor_ = file->message_type(9);
  static const int GetAllProgramVidInfoReq_offsets_[1] = {
  };
  GetAllProgramVidInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllProgramVidInfoReq_descriptor_,
      GetAllProgramVidInfoReq::default_instance_,
      GetAllProgramVidInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVidInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVidInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllProgramVidInfoReq));
  GetAllProgramVideInfoRsp_descriptor_ = file->message_type(10);
  static const int GetAllProgramVideInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideInfoRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideInfoRsp, infolist_),
  };
  GetAllProgramVideInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllProgramVideInfoRsp_descriptor_,
      GetAllProgramVideInfoRsp::default_instance_,
      GetAllProgramVideInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProgramVideInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllProgramVideInfoRsp));
  DbProgramInfo_descriptor_ = file->message_type(11);
  static const int DbProgramInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, uivideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, uiroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, uimuxsvrip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, uistreamformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, uibackframecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, uibufferframecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, uip2pbacktime_),
  };
  DbProgramInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbProgramInfo_descriptor_,
      DbProgramInfo::default_instance_,
      DbProgramInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbProgramInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbProgramInfo));
  DbModuleInfo_descriptor_ = file->message_type(12);
  static const int DbModuleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, strmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, uivideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, uiaccesstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, uicdntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, uimaxbandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, uitotalbandwidth_),
  };
  DbModuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbModuleInfo_descriptor_,
      DbModuleInfo::default_instance_,
      DbModuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbModuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbModuleInfo));
  AllDbProgramInfo_descriptor_ = file->message_type(13);
  static const int AllDbProgramInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDbProgramInfo, strupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDbProgramInfo, dbprograminfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDbProgramInfo, dbmoduleinfolist_),
  };
  AllDbProgramInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllDbProgramInfo_descriptor_,
      AllDbProgramInfo::default_instance_,
      AllDbProgramInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDbProgramInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllDbProgramInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllDbProgramInfo));
  CMD_descriptor_ = file->enum_type(0);
  SUBCMD_descriptor_ = file->enum_type(1);
  VIDEO_STATUS_descriptor_ = file->enum_type(2);
  RESULT_CODE_descriptor_ = file->enum_type(3);
  STREAM_FORMAT_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LiveProgramMgr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgramInfo_descriptor_, &ProgramInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SNotifyVideoStatus_descriptor_, &SNotifyVideoStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProgramInfoReq_descriptor_, &GetProgramInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProgramInfoRsp_descriptor_, &GetProgramInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoIdItem_descriptor_, &VideoIdItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllProgramVideoIdReq_descriptor_, &GetAllProgramVideoIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllProgramVideoIdRsp_descriptor_, &GetAllProgramVideoIdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VidInfoItem_descriptor_, &VidInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VidInfoList_descriptor_, &VidInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllProgramVidInfoReq_descriptor_, &GetAllProgramVidInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllProgramVideInfoRsp_descriptor_, &GetAllProgramVideInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbProgramInfo_descriptor_, &DbProgramInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbModuleInfo_descriptor_, &DbModuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllDbProgramInfo_descriptor_, &AllDbProgramInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LiveProgramMgr_2eproto() {
  delete ProgramInfo::default_instance_;
  delete ProgramInfo_reflection_;
  delete SNotifyVideoStatus::default_instance_;
  delete SNotifyVideoStatus_reflection_;
  delete GetProgramInfoReq::default_instance_;
  delete GetProgramInfoReq_reflection_;
  delete GetProgramInfoRsp::default_instance_;
  delete GetProgramInfoRsp_reflection_;
  delete VideoIdItem::default_instance_;
  delete VideoIdItem_reflection_;
  delete GetAllProgramVideoIdReq::default_instance_;
  delete GetAllProgramVideoIdReq_reflection_;
  delete GetAllProgramVideoIdRsp::default_instance_;
  delete GetAllProgramVideoIdRsp_reflection_;
  delete VidInfoItem::default_instance_;
  delete VidInfoItem_reflection_;
  delete VidInfoList::default_instance_;
  delete VidInfoList_reflection_;
  delete GetAllProgramVidInfoReq::default_instance_;
  delete GetAllProgramVidInfoReq_reflection_;
  delete GetAllProgramVideInfoRsp::default_instance_;
  delete GetAllProgramVideInfoRsp_reflection_;
  delete DbProgramInfo::default_instance_;
  delete DbProgramInfo_reflection_;
  delete DbModuleInfo::default_instance_;
  delete DbModuleInfo_reflection_;
  delete AllDbProgramInfo::default_instance_;
  delete AllDbProgramInfo_reflection_;
}

void protobuf_AddDesc_LiveProgramMgr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024LiveProgramMgr.proto\022\025liveprogrammgr_p"
    "rotos\"^\n\013ProgramInfo\022\020\n\010uiRoomId\030\001 \002(\r\022\021"
    "\n\tuiVideoId\030\002 \002(\r\022\022\n\nuiMuxSvrIp\030\003 \002(\r\022\026\n"
    "\016uiStreamFormat\030\004 \001(\r\"\313\001\n\022SNotifyVideoSt"
    "atus\022\020\n\010uiStatus\030\001 \002(\r\022\r\n\005uiUin\030\002 \002(\004\022\020\n"
    "\010uiRoomId\030\003 \002(\r\022\024\n\014uiMainRoomId\030\004 \002(\r\022\022\n"
    "\nuiRoomType\030\005 \002(\r\022\021\n\tuiVideoId\030\006 \002(\r\022\030\n\020"
    "uiSelfInternalIp\030\007 \002(\r\022\030\n\020uiSelfExternal"
    "Ip\030\010 \002(\r\022\021\n\tuiBitRate\030\t \001(\r\"\023\n\021GetProgra"
    "mInfoReq\"\\\n\021GetProgramInfoRsp\022\016\n\006Result\030"
    "\001 \002(\r\0227\n\013ProgramList\030\002 \003(\0132\".liveprogram"
    "mgr_protos.ProgramInfo\"\220\001\n\013VideoIdItem\022\023"
    "\n\013ProgramType\030\001 \002(\014\022\021\n\tuiVideoId\030\002 \002(\r\022\024"
    "\n\014uiAccessType\030\003 \001(\r\022\021\n\tuiCdnType\030\004 \001(\r\022"
    "\026\n\016uiMaxBandWidth\030\005 \001(\r\022\030\n\020uiTotalBandWi"
    "dth\030\006 \001(\r\"\031\n\027GetAllProgramVideoIdReq\"b\n\027"
    "GetAllProgramVideoIdRsp\022\016\n\006Result\030\001 \002(\r\022"
    "7\n\013VideoIdList\030\002 \003(\0132\".liveprogrammgr_pr"
    "otos.VideoIdItem\"\300\001\n\013VidInfoItem\022\021\n\tuiVi"
    "deoId\030\001 \002(\r\022\024\n\014uiAccessType\030\002 \001(\r\022\021\n\tuiC"
    "dnType\030\003 \001(\r\022\026\n\016uiMaxBandWidth\030\004 \001(\r\022\030\n\020"
    "uiTotalBandWidth\030\005 \001(\r\022\021\n\tuiBitRate\030\006 \001("
    "\r\022\017\n\007uiWidth\030\007 \001(\r\022\020\n\010uiHeight\030\010 \001(\r\022\r\n\005"
    "uiFps\030\t \001(\r\"W\n\013VidInfoList\022\023\n\013ProgramTyp"
    "e\030\001 \002(\014\0223\n\007VidInfo\030\002 \003(\0132\".liveprogrammg"
    "r_protos.VidInfoItem\"\031\n\027GetAllProgramVid"
    "InfoReq\"`\n\030GetAllProgramVideInfoRsp\022\016\n\006R"
    "esult\030\001 \002(\r\0224\n\010InfoList\030\002 \003(\0132\".liveprog"
    "rammgr_protos.VidInfoList\"\253\001\n\rDbProgramI"
    "nfo\022\021\n\tuiVideoId\030\001 \002(\r\022\020\n\010uiRoomId\030\002 \002(\r"
    "\022\022\n\nuiMuxSvrIp\030\003 \002(\r\022\026\n\016uiStreamFormat\030\004"
    " \002(\r\022\026\n\016uiBackFrameCnt\030\005 \001(\r\022\032\n\022uiBuffer"
    "FrameCount\030\006 \001(\r\022\025\n\ruiP2PBackTime\030\007 \001(\r\""
    "\217\001\n\014DbModuleInfo\022\021\n\tstrModule\030\001 \002(\014\022\021\n\tu"
    "iVideoId\030\002 \002(\r\022\024\n\014uiAccessType\030\003 \002(\r\022\021\n\t"
    "uiCdnType\030\004 \001(\r\022\026\n\016uiMaxBandWidth\030\005 \001(\r\022"
    "\030\n\020uiTotalBandWidth\030\006 \001(\r\"\251\001\n\020AllDbProgr"
    "amInfo\022\025\n\rstrUpdateTime\030\001 \002(\014\022\?\n\021dbProgr"
    "amInfoList\030\002 \003(\0132$.liveprogrammgr_protos"
    ".DbProgramInfo\022=\n\020dbModuleInfoList\030\003 \003(\013"
    "2#.liveprogrammgr_protos.DbModuleInfo*\036\n"
    "\003CMD\022\027\n\022CMD_LIVEPROGRAMMGR\020\200h*\371\001\n\006SUBCMD"
    "\022\026\n\022SUBCMD_GET_PROGRAM\020\001\022 \n\034SUBCMD_NOTIF"
    "Y_VIDEOID_STATUS\020\002\022\032\n\026SUBCMD_GET_ALL_VID"
    "EOID\020\004\022\032\n\026SUBCMD_GET_BIG_PROGRAM\020\005\022\036\n\032SU"
    "BCMD_GET_BIG_ALL_VIDEOID\020\006\022%\n!SUBCMD_GET"
    "_NEED_TRANSCODE_PROGRAM\020\007\022\032\n\026SUBCMD_GET_"
    "ALL_PROGRAM\020\010\022\032\n\026SUBCMD_GET_ALL_VIDINFO\020"
    "\t*E\n\014VIDEO_STATUS\022\017\n\013VIDEO_START\020\001\022\016\n\nVI"
    "DEO_STOP\020\002\022\024\n\020VIDEO_HEART_BEAT\020\003*q\n\013RESU"
    "LT_CODE\022\022\n\016RESULT_SUCCESS\020\000\022\027\n\023RESULT_IN"
    "VALID_TYPE\020\001\022\031\n\025RESULT_TYPE_NOT_FOUND\020\002\022"
    "\032\n\026RESULT_GET_LIST_FAILED\020\003*.\n\rSTREAM_FO"
    "RMAT\022\016\n\nFORMAT_FLV\020\001\022\r\n\tFORMAT_TS\020\002", 2155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LiveProgramMgr.proto", &protobuf_RegisterTypes);
  ProgramInfo::default_instance_ = new ProgramInfo();
  SNotifyVideoStatus::default_instance_ = new SNotifyVideoStatus();
  GetProgramInfoReq::default_instance_ = new GetProgramInfoReq();
  GetProgramInfoRsp::default_instance_ = new GetProgramInfoRsp();
  VideoIdItem::default_instance_ = new VideoIdItem();
  GetAllProgramVideoIdReq::default_instance_ = new GetAllProgramVideoIdReq();
  GetAllProgramVideoIdRsp::default_instance_ = new GetAllProgramVideoIdRsp();
  VidInfoItem::default_instance_ = new VidInfoItem();
  VidInfoList::default_instance_ = new VidInfoList();
  GetAllProgramVidInfoReq::default_instance_ = new GetAllProgramVidInfoReq();
  GetAllProgramVideInfoRsp::default_instance_ = new GetAllProgramVideInfoRsp();
  DbProgramInfo::default_instance_ = new DbProgramInfo();
  DbModuleInfo::default_instance_ = new DbModuleInfo();
  AllDbProgramInfo::default_instance_ = new AllDbProgramInfo();
  ProgramInfo::default_instance_->InitAsDefaultInstance();
  SNotifyVideoStatus::default_instance_->InitAsDefaultInstance();
  GetProgramInfoReq::default_instance_->InitAsDefaultInstance();
  GetProgramInfoRsp::default_instance_->InitAsDefaultInstance();
  VideoIdItem::default_instance_->InitAsDefaultInstance();
  GetAllProgramVideoIdReq::default_instance_->InitAsDefaultInstance();
  GetAllProgramVideoIdRsp::default_instance_->InitAsDefaultInstance();
  VidInfoItem::default_instance_->InitAsDefaultInstance();
  VidInfoList::default_instance_->InitAsDefaultInstance();
  GetAllProgramVidInfoReq::default_instance_->InitAsDefaultInstance();
  GetAllProgramVideInfoRsp::default_instance_->InitAsDefaultInstance();
  DbProgramInfo::default_instance_->InitAsDefaultInstance();
  DbModuleInfo::default_instance_->InitAsDefaultInstance();
  AllDbProgramInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LiveProgramMgr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LiveProgramMgr_2eproto {
  StaticDescriptorInitializer_LiveProgramMgr_2eproto() {
    protobuf_AddDesc_LiveProgramMgr_2eproto();
  }
} static_descriptor_initializer_LiveProgramMgr_2eproto_;
const ::google::protobuf::EnumDescriptor* CMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_descriptor_;
}
bool CMD_IsValid(int value) {
  switch(value) {
    case 13312:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SUBCMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUBCMD_descriptor_;
}
bool SUBCMD_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VIDEO_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIDEO_STATUS_descriptor_;
}
bool VIDEO_STATUS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESULT_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_CODE_descriptor_;
}
bool RESULT_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STREAM_FORMAT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STREAM_FORMAT_descriptor_;
}
bool STREAM_FORMAT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ProgramInfo::kUiRoomIdFieldNumber;
const int ProgramInfo::kUiVideoIdFieldNumber;
const int ProgramInfo::kUiMuxSvrIpFieldNumber;
const int ProgramInfo::kUiStreamFormatFieldNumber;
#endif  // !_MSC_VER

ProgramInfo::ProgramInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProgramInfo::InitAsDefaultInstance() {
}

ProgramInfo::ProgramInfo(const ProgramInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProgramInfo::SharedCtor() {
  _cached_size_ = 0;
  uiroomid_ = 0u;
  uivideoid_ = 0u;
  uimuxsvrip_ = 0u;
  uistreamformat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgramInfo::~ProgramInfo() {
  SharedDtor();
}

void ProgramInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProgramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgramInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgramInfo_descriptor_;
}

const ProgramInfo& ProgramInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

ProgramInfo* ProgramInfo::default_instance_ = NULL;

ProgramInfo* ProgramInfo::New() const {
  return new ProgramInfo;
}

void ProgramInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiroomid_ = 0u;
    uivideoid_ = 0u;
    uimuxsvrip_ = 0u;
    uistreamformat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiRoomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiroomid_)));
          set_has_uiroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiVideoId;
        break;
      }

      // required uint32 uiVideoId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiVideoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivideoid_)));
          set_has_uivideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMuxSvrIp;
        break;
      }

      // required uint32 uiMuxSvrIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMuxSvrIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimuxsvrip_)));
          set_has_uimuxsvrip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiStreamFormat;
        break;
      }

      // optional uint32 uiStreamFormat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiStreamFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistreamformat_)));
          set_has_uistreamformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiRoomId = 1;
  if (has_uiroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiroomid(), output);
  }

  // required uint32 uiVideoId = 2;
  if (has_uivideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uivideoid(), output);
  }

  // required uint32 uiMuxSvrIp = 3;
  if (has_uimuxsvrip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uimuxsvrip(), output);
  }

  // optional uint32 uiStreamFormat = 4;
  if (has_uistreamformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uistreamformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProgramInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiRoomId = 1;
  if (has_uiroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiroomid(), target);
  }

  // required uint32 uiVideoId = 2;
  if (has_uivideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uivideoid(), target);
  }

  // required uint32 uiMuxSvrIp = 3;
  if (has_uimuxsvrip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uimuxsvrip(), target);
  }

  // optional uint32 uiStreamFormat = 4;
  if (has_uistreamformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uistreamformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProgramInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiRoomId = 1;
    if (has_uiroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiroomid());
    }

    // required uint32 uiVideoId = 2;
    if (has_uivideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivideoid());
    }

    // required uint32 uiMuxSvrIp = 3;
    if (has_uimuxsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimuxsvrip());
    }

    // optional uint32 uiStreamFormat = 4;
    if (has_uistreamformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistreamformat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgramInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgramInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgramInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgramInfo::MergeFrom(const ProgramInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiroomid()) {
      set_uiroomid(from.uiroomid());
    }
    if (from.has_uivideoid()) {
      set_uivideoid(from.uivideoid());
    }
    if (from.has_uimuxsvrip()) {
      set_uimuxsvrip(from.uimuxsvrip());
    }
    if (from.has_uistreamformat()) {
      set_uistreamformat(from.uistreamformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgramInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgramInfo::CopyFrom(const ProgramInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProgramInfo::Swap(ProgramInfo* other) {
  if (other != this) {
    std::swap(uiroomid_, other->uiroomid_);
    std::swap(uivideoid_, other->uivideoid_);
    std::swap(uimuxsvrip_, other->uimuxsvrip_);
    std::swap(uistreamformat_, other->uistreamformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgramInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgramInfo_descriptor_;
  metadata.reflection = ProgramInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SNotifyVideoStatus::kUiStatusFieldNumber;
const int SNotifyVideoStatus::kUiUinFieldNumber;
const int SNotifyVideoStatus::kUiRoomIdFieldNumber;
const int SNotifyVideoStatus::kUiMainRoomIdFieldNumber;
const int SNotifyVideoStatus::kUiRoomTypeFieldNumber;
const int SNotifyVideoStatus::kUiVideoIdFieldNumber;
const int SNotifyVideoStatus::kUiSelfInternalIpFieldNumber;
const int SNotifyVideoStatus::kUiSelfExternalIpFieldNumber;
const int SNotifyVideoStatus::kUiBitRateFieldNumber;
#endif  // !_MSC_VER

SNotifyVideoStatus::SNotifyVideoStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SNotifyVideoStatus::InitAsDefaultInstance() {
}

SNotifyVideoStatus::SNotifyVideoStatus(const SNotifyVideoStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SNotifyVideoStatus::SharedCtor() {
  _cached_size_ = 0;
  uistatus_ = 0u;
  uiuin_ = GOOGLE_ULONGLONG(0);
  uiroomid_ = 0u;
  uimainroomid_ = 0u;
  uiroomtype_ = 0u;
  uivideoid_ = 0u;
  uiselfinternalip_ = 0u;
  uiselfexternalip_ = 0u;
  uibitrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SNotifyVideoStatus::~SNotifyVideoStatus() {
  SharedDtor();
}

void SNotifyVideoStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SNotifyVideoStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SNotifyVideoStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SNotifyVideoStatus_descriptor_;
}

const SNotifyVideoStatus& SNotifyVideoStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

SNotifyVideoStatus* SNotifyVideoStatus::default_instance_ = NULL;

SNotifyVideoStatus* SNotifyVideoStatus::New() const {
  return new SNotifyVideoStatus;
}

void SNotifyVideoStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uistatus_ = 0u;
    uiuin_ = GOOGLE_ULONGLONG(0);
    uiroomid_ = 0u;
    uimainroomid_ = 0u;
    uiroomtype_ = 0u;
    uivideoid_ = 0u;
    uiselfinternalip_ = 0u;
    uiselfexternalip_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uibitrate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SNotifyVideoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistatus_)));
          set_has_uistatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiUin;
        break;
      }

      // required uint64 uiUin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uiuin_)));
          set_has_uiuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiRoomId;
        break;
      }

      // required uint32 uiRoomId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiroomid_)));
          set_has_uiroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiMainRoomId;
        break;
      }

      // required uint32 uiMainRoomId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMainRoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimainroomid_)));
          set_has_uimainroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiRoomType;
        break;
      }

      // required uint32 uiRoomType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiroomtype_)));
          set_has_uiroomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiVideoId;
        break;
      }

      // required uint32 uiVideoId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiVideoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivideoid_)));
          set_has_uivideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiSelfInternalIp;
        break;
      }

      // required uint32 uiSelfInternalIp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSelfInternalIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiselfinternalip_)));
          set_has_uiselfinternalip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uiSelfExternalIp;
        break;
      }

      // required uint32 uiSelfExternalIp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSelfExternalIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiselfexternalip_)));
          set_has_uiselfexternalip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uiBitRate;
        break;
      }

      // optional uint32 uiBitRate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibitrate_)));
          set_has_uibitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SNotifyVideoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiStatus = 1;
  if (has_uistatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uistatus(), output);
  }

  // required uint64 uiUin = 2;
  if (has_uiuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uiuin(), output);
  }

  // required uint32 uiRoomId = 3;
  if (has_uiroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiroomid(), output);
  }

  // required uint32 uiMainRoomId = 4;
  if (has_uimainroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uimainroomid(), output);
  }

  // required uint32 uiRoomType = 5;
  if (has_uiroomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uiroomtype(), output);
  }

  // required uint32 uiVideoId = 6;
  if (has_uivideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uivideoid(), output);
  }

  // required uint32 uiSelfInternalIp = 7;
  if (has_uiselfinternalip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uiselfinternalip(), output);
  }

  // required uint32 uiSelfExternalIp = 8;
  if (has_uiselfexternalip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uiselfexternalip(), output);
  }

  // optional uint32 uiBitRate = 9;
  if (has_uibitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uibitrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SNotifyVideoStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiStatus = 1;
  if (has_uistatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uistatus(), target);
  }

  // required uint64 uiUin = 2;
  if (has_uiuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uiuin(), target);
  }

  // required uint32 uiRoomId = 3;
  if (has_uiroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiroomid(), target);
  }

  // required uint32 uiMainRoomId = 4;
  if (has_uimainroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uimainroomid(), target);
  }

  // required uint32 uiRoomType = 5;
  if (has_uiroomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uiroomtype(), target);
  }

  // required uint32 uiVideoId = 6;
  if (has_uivideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uivideoid(), target);
  }

  // required uint32 uiSelfInternalIp = 7;
  if (has_uiselfinternalip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uiselfinternalip(), target);
  }

  // required uint32 uiSelfExternalIp = 8;
  if (has_uiselfexternalip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uiselfexternalip(), target);
  }

  // optional uint32 uiBitRate = 9;
  if (has_uibitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uibitrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SNotifyVideoStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiStatus = 1;
    if (has_uistatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistatus());
    }

    // required uint64 uiUin = 2;
    if (has_uiuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uiuin());
    }

    // required uint32 uiRoomId = 3;
    if (has_uiroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiroomid());
    }

    // required uint32 uiMainRoomId = 4;
    if (has_uimainroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimainroomid());
    }

    // required uint32 uiRoomType = 5;
    if (has_uiroomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiroomtype());
    }

    // required uint32 uiVideoId = 6;
    if (has_uivideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivideoid());
    }

    // required uint32 uiSelfInternalIp = 7;
    if (has_uiselfinternalip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiselfinternalip());
    }

    // required uint32 uiSelfExternalIp = 8;
    if (has_uiselfexternalip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiselfexternalip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 uiBitRate = 9;
    if (has_uibitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibitrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SNotifyVideoStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SNotifyVideoStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SNotifyVideoStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SNotifyVideoStatus::MergeFrom(const SNotifyVideoStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uistatus()) {
      set_uistatus(from.uistatus());
    }
    if (from.has_uiuin()) {
      set_uiuin(from.uiuin());
    }
    if (from.has_uiroomid()) {
      set_uiroomid(from.uiroomid());
    }
    if (from.has_uimainroomid()) {
      set_uimainroomid(from.uimainroomid());
    }
    if (from.has_uiroomtype()) {
      set_uiroomtype(from.uiroomtype());
    }
    if (from.has_uivideoid()) {
      set_uivideoid(from.uivideoid());
    }
    if (from.has_uiselfinternalip()) {
      set_uiselfinternalip(from.uiselfinternalip());
    }
    if (from.has_uiselfexternalip()) {
      set_uiselfexternalip(from.uiselfexternalip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uibitrate()) {
      set_uibitrate(from.uibitrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SNotifyVideoStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNotifyVideoStatus::CopyFrom(const SNotifyVideoStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNotifyVideoStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void SNotifyVideoStatus::Swap(SNotifyVideoStatus* other) {
  if (other != this) {
    std::swap(uistatus_, other->uistatus_);
    std::swap(uiuin_, other->uiuin_);
    std::swap(uiroomid_, other->uiroomid_);
    std::swap(uimainroomid_, other->uimainroomid_);
    std::swap(uiroomtype_, other->uiroomtype_);
    std::swap(uivideoid_, other->uivideoid_);
    std::swap(uiselfinternalip_, other->uiselfinternalip_);
    std::swap(uiselfexternalip_, other->uiselfexternalip_);
    std::swap(uibitrate_, other->uibitrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SNotifyVideoStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SNotifyVideoStatus_descriptor_;
  metadata.reflection = SNotifyVideoStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetProgramInfoReq::GetProgramInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProgramInfoReq::InitAsDefaultInstance() {
}

GetProgramInfoReq::GetProgramInfoReq(const GetProgramInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProgramInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProgramInfoReq::~GetProgramInfoReq() {
  SharedDtor();
}

void GetProgramInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetProgramInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProgramInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProgramInfoReq_descriptor_;
}

const GetProgramInfoReq& GetProgramInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

GetProgramInfoReq* GetProgramInfoReq::default_instance_ = NULL;

GetProgramInfoReq* GetProgramInfoReq::New() const {
  return new GetProgramInfoReq;
}

void GetProgramInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProgramInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetProgramInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProgramInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProgramInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProgramInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProgramInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProgramInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProgramInfoReq::MergeFrom(const GetProgramInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProgramInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProgramInfoReq::CopyFrom(const GetProgramInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgramInfoReq::IsInitialized() const {

  return true;
}

void GetProgramInfoReq::Swap(GetProgramInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProgramInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProgramInfoReq_descriptor_;
  metadata.reflection = GetProgramInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProgramInfoRsp::kResultFieldNumber;
const int GetProgramInfoRsp::kProgramListFieldNumber;
#endif  // !_MSC_VER

GetProgramInfoRsp::GetProgramInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProgramInfoRsp::InitAsDefaultInstance() {
}

GetProgramInfoRsp::GetProgramInfoRsp(const GetProgramInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProgramInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProgramInfoRsp::~GetProgramInfoRsp() {
  SharedDtor();
}

void GetProgramInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetProgramInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProgramInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProgramInfoRsp_descriptor_;
}

const GetProgramInfoRsp& GetProgramInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

GetProgramInfoRsp* GetProgramInfoRsp::default_instance_ = NULL;

GetProgramInfoRsp* GetProgramInfoRsp::New() const {
  return new GetProgramInfoRsp;
}

void GetProgramInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  programlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProgramInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ProgramList;
        break;
      }

      // repeated .liveprogrammgr_protos.ProgramInfo ProgramList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProgramList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_programlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ProgramList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProgramInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .liveprogrammgr_protos.ProgramInfo ProgramList = 2;
  for (int i = 0; i < this->programlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->programlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProgramInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .liveprogrammgr_protos.ProgramInfo ProgramList = 2;
  for (int i = 0; i < this->programlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->programlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProgramInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .liveprogrammgr_protos.ProgramInfo ProgramList = 2;
  total_size += 1 * this->programlist_size();
  for (int i = 0; i < this->programlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->programlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProgramInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProgramInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProgramInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProgramInfoRsp::MergeFrom(const GetProgramInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  programlist_.MergeFrom(from.programlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProgramInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProgramInfoRsp::CopyFrom(const GetProgramInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProgramInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < programlist_size(); i++) {
    if (!this->programlist(i).IsInitialized()) return false;
  }
  return true;
}

void GetProgramInfoRsp::Swap(GetProgramInfoRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    programlist_.Swap(&other->programlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProgramInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProgramInfoRsp_descriptor_;
  metadata.reflection = GetProgramInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoIdItem::kProgramTypeFieldNumber;
const int VideoIdItem::kUiVideoIdFieldNumber;
const int VideoIdItem::kUiAccessTypeFieldNumber;
const int VideoIdItem::kUiCdnTypeFieldNumber;
const int VideoIdItem::kUiMaxBandWidthFieldNumber;
const int VideoIdItem::kUiTotalBandWidthFieldNumber;
#endif  // !_MSC_VER

VideoIdItem::VideoIdItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoIdItem::InitAsDefaultInstance() {
}

VideoIdItem::VideoIdItem(const VideoIdItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoIdItem::SharedCtor() {
  _cached_size_ = 0;
  programtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uivideoid_ = 0u;
  uiaccesstype_ = 0u;
  uicdntype_ = 0u;
  uimaxbandwidth_ = 0u;
  uitotalbandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoIdItem::~VideoIdItem() {
  SharedDtor();
}

void VideoIdItem::SharedDtor() {
  if (programtype_ != &::google::protobuf::internal::kEmptyString) {
    delete programtype_;
  }
  if (this != default_instance_) {
  }
}

void VideoIdItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoIdItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoIdItem_descriptor_;
}

const VideoIdItem& VideoIdItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

VideoIdItem* VideoIdItem::default_instance_ = NULL;

VideoIdItem* VideoIdItem::New() const {
  return new VideoIdItem;
}

void VideoIdItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_programtype()) {
      if (programtype_ != &::google::protobuf::internal::kEmptyString) {
        programtype_->clear();
      }
    }
    uivideoid_ = 0u;
    uiaccesstype_ = 0u;
    uicdntype_ = 0u;
    uimaxbandwidth_ = 0u;
    uitotalbandwidth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoIdItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ProgramType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_programtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiVideoId;
        break;
      }

      // required uint32 uiVideoId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiVideoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivideoid_)));
          set_has_uivideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiAccessType;
        break;
      }

      // optional uint32 uiAccessType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAccessType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiaccesstype_)));
          set_has_uiaccesstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiCdnType;
        break;
      }

      // optional uint32 uiCdnType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiCdnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uicdntype_)));
          set_has_uicdntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiMaxBandWidth;
        break;
      }

      // optional uint32 uiMaxBandWidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMaxBandWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimaxbandwidth_)));
          set_has_uimaxbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiTotalBandWidth;
        break;
      }

      // optional uint32 uiTotalBandWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTotalBandWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitotalbandwidth_)));
          set_has_uitotalbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoIdItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ProgramType = 1;
  if (has_programtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->programtype(), output);
  }

  // required uint32 uiVideoId = 2;
  if (has_uivideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uivideoid(), output);
  }

  // optional uint32 uiAccessType = 3;
  if (has_uiaccesstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiaccesstype(), output);
  }

  // optional uint32 uiCdnType = 4;
  if (has_uicdntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uicdntype(), output);
  }

  // optional uint32 uiMaxBandWidth = 5;
  if (has_uimaxbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uimaxbandwidth(), output);
  }

  // optional uint32 uiTotalBandWidth = 6;
  if (has_uitotalbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uitotalbandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoIdItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ProgramType = 1;
  if (has_programtype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->programtype(), target);
  }

  // required uint32 uiVideoId = 2;
  if (has_uivideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uivideoid(), target);
  }

  // optional uint32 uiAccessType = 3;
  if (has_uiaccesstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiaccesstype(), target);
  }

  // optional uint32 uiCdnType = 4;
  if (has_uicdntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uicdntype(), target);
  }

  // optional uint32 uiMaxBandWidth = 5;
  if (has_uimaxbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uimaxbandwidth(), target);
  }

  // optional uint32 uiTotalBandWidth = 6;
  if (has_uitotalbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uitotalbandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoIdItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ProgramType = 1;
    if (has_programtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->programtype());
    }

    // required uint32 uiVideoId = 2;
    if (has_uivideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivideoid());
    }

    // optional uint32 uiAccessType = 3;
    if (has_uiaccesstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiaccesstype());
    }

    // optional uint32 uiCdnType = 4;
    if (has_uicdntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uicdntype());
    }

    // optional uint32 uiMaxBandWidth = 5;
    if (has_uimaxbandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimaxbandwidth());
    }

    // optional uint32 uiTotalBandWidth = 6;
    if (has_uitotalbandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitotalbandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoIdItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoIdItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoIdItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoIdItem::MergeFrom(const VideoIdItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_programtype()) {
      set_programtype(from.programtype());
    }
    if (from.has_uivideoid()) {
      set_uivideoid(from.uivideoid());
    }
    if (from.has_uiaccesstype()) {
      set_uiaccesstype(from.uiaccesstype());
    }
    if (from.has_uicdntype()) {
      set_uicdntype(from.uicdntype());
    }
    if (from.has_uimaxbandwidth()) {
      set_uimaxbandwidth(from.uimaxbandwidth());
    }
    if (from.has_uitotalbandwidth()) {
      set_uitotalbandwidth(from.uitotalbandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoIdItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoIdItem::CopyFrom(const VideoIdItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoIdItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VideoIdItem::Swap(VideoIdItem* other) {
  if (other != this) {
    std::swap(programtype_, other->programtype_);
    std::swap(uivideoid_, other->uivideoid_);
    std::swap(uiaccesstype_, other->uiaccesstype_);
    std::swap(uicdntype_, other->uicdntype_);
    std::swap(uimaxbandwidth_, other->uimaxbandwidth_);
    std::swap(uitotalbandwidth_, other->uitotalbandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoIdItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoIdItem_descriptor_;
  metadata.reflection = VideoIdItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllProgramVideoIdReq::GetAllProgramVideoIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllProgramVideoIdReq::InitAsDefaultInstance() {
}

GetAllProgramVideoIdReq::GetAllProgramVideoIdReq(const GetAllProgramVideoIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllProgramVideoIdReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllProgramVideoIdReq::~GetAllProgramVideoIdReq() {
  SharedDtor();
}

void GetAllProgramVideoIdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllProgramVideoIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllProgramVideoIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllProgramVideoIdReq_descriptor_;
}

const GetAllProgramVideoIdReq& GetAllProgramVideoIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

GetAllProgramVideoIdReq* GetAllProgramVideoIdReq::default_instance_ = NULL;

GetAllProgramVideoIdReq* GetAllProgramVideoIdReq::New() const {
  return new GetAllProgramVideoIdReq;
}

void GetAllProgramVideoIdReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllProgramVideoIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetAllProgramVideoIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllProgramVideoIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllProgramVideoIdReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllProgramVideoIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllProgramVideoIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllProgramVideoIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllProgramVideoIdReq::MergeFrom(const GetAllProgramVideoIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllProgramVideoIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllProgramVideoIdReq::CopyFrom(const GetAllProgramVideoIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllProgramVideoIdReq::IsInitialized() const {

  return true;
}

void GetAllProgramVideoIdReq::Swap(GetAllProgramVideoIdReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllProgramVideoIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllProgramVideoIdReq_descriptor_;
  metadata.reflection = GetAllProgramVideoIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllProgramVideoIdRsp::kResultFieldNumber;
const int GetAllProgramVideoIdRsp::kVideoIdListFieldNumber;
#endif  // !_MSC_VER

GetAllProgramVideoIdRsp::GetAllProgramVideoIdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllProgramVideoIdRsp::InitAsDefaultInstance() {
}

GetAllProgramVideoIdRsp::GetAllProgramVideoIdRsp(const GetAllProgramVideoIdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllProgramVideoIdRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllProgramVideoIdRsp::~GetAllProgramVideoIdRsp() {
  SharedDtor();
}

void GetAllProgramVideoIdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllProgramVideoIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllProgramVideoIdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllProgramVideoIdRsp_descriptor_;
}

const GetAllProgramVideoIdRsp& GetAllProgramVideoIdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

GetAllProgramVideoIdRsp* GetAllProgramVideoIdRsp::default_instance_ = NULL;

GetAllProgramVideoIdRsp* GetAllProgramVideoIdRsp::New() const {
  return new GetAllProgramVideoIdRsp;
}

void GetAllProgramVideoIdRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  videoidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllProgramVideoIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VideoIdList;
        break;
      }

      // repeated .liveprogrammgr_protos.VideoIdItem VideoIdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VideoIdList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_videoidlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VideoIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAllProgramVideoIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .liveprogrammgr_protos.VideoIdItem VideoIdList = 2;
  for (int i = 0; i < this->videoidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->videoidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllProgramVideoIdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .liveprogrammgr_protos.VideoIdItem VideoIdList = 2;
  for (int i = 0; i < this->videoidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->videoidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllProgramVideoIdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .liveprogrammgr_protos.VideoIdItem VideoIdList = 2;
  total_size += 1 * this->videoidlist_size();
  for (int i = 0; i < this->videoidlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->videoidlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllProgramVideoIdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllProgramVideoIdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllProgramVideoIdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllProgramVideoIdRsp::MergeFrom(const GetAllProgramVideoIdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  videoidlist_.MergeFrom(from.videoidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllProgramVideoIdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllProgramVideoIdRsp::CopyFrom(const GetAllProgramVideoIdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllProgramVideoIdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < videoidlist_size(); i++) {
    if (!this->videoidlist(i).IsInitialized()) return false;
  }
  return true;
}

void GetAllProgramVideoIdRsp::Swap(GetAllProgramVideoIdRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    videoidlist_.Swap(&other->videoidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllProgramVideoIdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllProgramVideoIdRsp_descriptor_;
  metadata.reflection = GetAllProgramVideoIdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VidInfoItem::kUiVideoIdFieldNumber;
const int VidInfoItem::kUiAccessTypeFieldNumber;
const int VidInfoItem::kUiCdnTypeFieldNumber;
const int VidInfoItem::kUiMaxBandWidthFieldNumber;
const int VidInfoItem::kUiTotalBandWidthFieldNumber;
const int VidInfoItem::kUiBitRateFieldNumber;
const int VidInfoItem::kUiWidthFieldNumber;
const int VidInfoItem::kUiHeightFieldNumber;
const int VidInfoItem::kUiFpsFieldNumber;
#endif  // !_MSC_VER

VidInfoItem::VidInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VidInfoItem::InitAsDefaultInstance() {
}

VidInfoItem::VidInfoItem(const VidInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VidInfoItem::SharedCtor() {
  _cached_size_ = 0;
  uivideoid_ = 0u;
  uiaccesstype_ = 0u;
  uicdntype_ = 0u;
  uimaxbandwidth_ = 0u;
  uitotalbandwidth_ = 0u;
  uibitrate_ = 0u;
  uiwidth_ = 0u;
  uiheight_ = 0u;
  uifps_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VidInfoItem::~VidInfoItem() {
  SharedDtor();
}

void VidInfoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VidInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VidInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VidInfoItem_descriptor_;
}

const VidInfoItem& VidInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

VidInfoItem* VidInfoItem::default_instance_ = NULL;

VidInfoItem* VidInfoItem::New() const {
  return new VidInfoItem;
}

void VidInfoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uivideoid_ = 0u;
    uiaccesstype_ = 0u;
    uicdntype_ = 0u;
    uimaxbandwidth_ = 0u;
    uitotalbandwidth_ = 0u;
    uibitrate_ = 0u;
    uiwidth_ = 0u;
    uiheight_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uifps_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VidInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiVideoId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivideoid_)));
          set_has_uivideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiAccessType;
        break;
      }

      // optional uint32 uiAccessType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAccessType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiaccesstype_)));
          set_has_uiaccesstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiCdnType;
        break;
      }

      // optional uint32 uiCdnType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiCdnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uicdntype_)));
          set_has_uicdntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiMaxBandWidth;
        break;
      }

      // optional uint32 uiMaxBandWidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMaxBandWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimaxbandwidth_)));
          set_has_uimaxbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiTotalBandWidth;
        break;
      }

      // optional uint32 uiTotalBandWidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTotalBandWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitotalbandwidth_)));
          set_has_uitotalbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiBitRate;
        break;
      }

      // optional uint32 uiBitRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibitrate_)));
          set_has_uibitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiWidth;
        break;
      }

      // optional uint32 uiWidth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiwidth_)));
          set_has_uiwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uiHeight;
        break;
      }

      // optional uint32 uiHeight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiheight_)));
          set_has_uiheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uiFps;
        break;
      }

      // optional uint32 uiFps = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uifps_)));
          set_has_uifps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VidInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiVideoId = 1;
  if (has_uivideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uivideoid(), output);
  }

  // optional uint32 uiAccessType = 2;
  if (has_uiaccesstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiaccesstype(), output);
  }

  // optional uint32 uiCdnType = 3;
  if (has_uicdntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uicdntype(), output);
  }

  // optional uint32 uiMaxBandWidth = 4;
  if (has_uimaxbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uimaxbandwidth(), output);
  }

  // optional uint32 uiTotalBandWidth = 5;
  if (has_uitotalbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uitotalbandwidth(), output);
  }

  // optional uint32 uiBitRate = 6;
  if (has_uibitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uibitrate(), output);
  }

  // optional uint32 uiWidth = 7;
  if (has_uiwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uiwidth(), output);
  }

  // optional uint32 uiHeight = 8;
  if (has_uiheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uiheight(), output);
  }

  // optional uint32 uiFps = 9;
  if (has_uifps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uifps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VidInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiVideoId = 1;
  if (has_uivideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uivideoid(), target);
  }

  // optional uint32 uiAccessType = 2;
  if (has_uiaccesstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiaccesstype(), target);
  }

  // optional uint32 uiCdnType = 3;
  if (has_uicdntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uicdntype(), target);
  }

  // optional uint32 uiMaxBandWidth = 4;
  if (has_uimaxbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uimaxbandwidth(), target);
  }

  // optional uint32 uiTotalBandWidth = 5;
  if (has_uitotalbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uitotalbandwidth(), target);
  }

  // optional uint32 uiBitRate = 6;
  if (has_uibitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uibitrate(), target);
  }

  // optional uint32 uiWidth = 7;
  if (has_uiwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uiwidth(), target);
  }

  // optional uint32 uiHeight = 8;
  if (has_uiheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uiheight(), target);
  }

  // optional uint32 uiFps = 9;
  if (has_uifps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uifps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VidInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiVideoId = 1;
    if (has_uivideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivideoid());
    }

    // optional uint32 uiAccessType = 2;
    if (has_uiaccesstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiaccesstype());
    }

    // optional uint32 uiCdnType = 3;
    if (has_uicdntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uicdntype());
    }

    // optional uint32 uiMaxBandWidth = 4;
    if (has_uimaxbandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimaxbandwidth());
    }

    // optional uint32 uiTotalBandWidth = 5;
    if (has_uitotalbandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitotalbandwidth());
    }

    // optional uint32 uiBitRate = 6;
    if (has_uibitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibitrate());
    }

    // optional uint32 uiWidth = 7;
    if (has_uiwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiwidth());
    }

    // optional uint32 uiHeight = 8;
    if (has_uiheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiheight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 uiFps = 9;
    if (has_uifps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uifps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VidInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VidInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VidInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VidInfoItem::MergeFrom(const VidInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uivideoid()) {
      set_uivideoid(from.uivideoid());
    }
    if (from.has_uiaccesstype()) {
      set_uiaccesstype(from.uiaccesstype());
    }
    if (from.has_uicdntype()) {
      set_uicdntype(from.uicdntype());
    }
    if (from.has_uimaxbandwidth()) {
      set_uimaxbandwidth(from.uimaxbandwidth());
    }
    if (from.has_uitotalbandwidth()) {
      set_uitotalbandwidth(from.uitotalbandwidth());
    }
    if (from.has_uibitrate()) {
      set_uibitrate(from.uibitrate());
    }
    if (from.has_uiwidth()) {
      set_uiwidth(from.uiwidth());
    }
    if (from.has_uiheight()) {
      set_uiheight(from.uiheight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uifps()) {
      set_uifps(from.uifps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VidInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VidInfoItem::CopyFrom(const VidInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VidInfoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VidInfoItem::Swap(VidInfoItem* other) {
  if (other != this) {
    std::swap(uivideoid_, other->uivideoid_);
    std::swap(uiaccesstype_, other->uiaccesstype_);
    std::swap(uicdntype_, other->uicdntype_);
    std::swap(uimaxbandwidth_, other->uimaxbandwidth_);
    std::swap(uitotalbandwidth_, other->uitotalbandwidth_);
    std::swap(uibitrate_, other->uibitrate_);
    std::swap(uiwidth_, other->uiwidth_);
    std::swap(uiheight_, other->uiheight_);
    std::swap(uifps_, other->uifps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VidInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VidInfoItem_descriptor_;
  metadata.reflection = VidInfoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VidInfoList::kProgramTypeFieldNumber;
const int VidInfoList::kVidInfoFieldNumber;
#endif  // !_MSC_VER

VidInfoList::VidInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VidInfoList::InitAsDefaultInstance() {
}

VidInfoList::VidInfoList(const VidInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VidInfoList::SharedCtor() {
  _cached_size_ = 0;
  programtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VidInfoList::~VidInfoList() {
  SharedDtor();
}

void VidInfoList::SharedDtor() {
  if (programtype_ != &::google::protobuf::internal::kEmptyString) {
    delete programtype_;
  }
  if (this != default_instance_) {
  }
}

void VidInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VidInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VidInfoList_descriptor_;
}

const VidInfoList& VidInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

VidInfoList* VidInfoList::default_instance_ = NULL;

VidInfoList* VidInfoList::New() const {
  return new VidInfoList;
}

void VidInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_programtype()) {
      if (programtype_ != &::google::protobuf::internal::kEmptyString) {
        programtype_->clear();
      }
    }
  }
  vidinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VidInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ProgramType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_programtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VidInfo;
        break;
      }

      // repeated .liveprogrammgr_protos.VidInfoItem VidInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VidInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vidinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_VidInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VidInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ProgramType = 1;
  if (has_programtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->programtype(), output);
  }

  // repeated .liveprogrammgr_protos.VidInfoItem VidInfo = 2;
  for (int i = 0; i < this->vidinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vidinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VidInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ProgramType = 1;
  if (has_programtype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->programtype(), target);
  }

  // repeated .liveprogrammgr_protos.VidInfoItem VidInfo = 2;
  for (int i = 0; i < this->vidinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vidinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VidInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ProgramType = 1;
    if (has_programtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->programtype());
    }

  }
  // repeated .liveprogrammgr_protos.VidInfoItem VidInfo = 2;
  total_size += 1 * this->vidinfo_size();
  for (int i = 0; i < this->vidinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vidinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VidInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VidInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VidInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VidInfoList::MergeFrom(const VidInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  vidinfo_.MergeFrom(from.vidinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_programtype()) {
      set_programtype(from.programtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VidInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VidInfoList::CopyFrom(const VidInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VidInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < vidinfo_size(); i++) {
    if (!this->vidinfo(i).IsInitialized()) return false;
  }
  return true;
}

void VidInfoList::Swap(VidInfoList* other) {
  if (other != this) {
    std::swap(programtype_, other->programtype_);
    vidinfo_.Swap(&other->vidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VidInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VidInfoList_descriptor_;
  metadata.reflection = VidInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllProgramVidInfoReq::GetAllProgramVidInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllProgramVidInfoReq::InitAsDefaultInstance() {
}

GetAllProgramVidInfoReq::GetAllProgramVidInfoReq(const GetAllProgramVidInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllProgramVidInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllProgramVidInfoReq::~GetAllProgramVidInfoReq() {
  SharedDtor();
}

void GetAllProgramVidInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllProgramVidInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllProgramVidInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllProgramVidInfoReq_descriptor_;
}

const GetAllProgramVidInfoReq& GetAllProgramVidInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

GetAllProgramVidInfoReq* GetAllProgramVidInfoReq::default_instance_ = NULL;

GetAllProgramVidInfoReq* GetAllProgramVidInfoReq::New() const {
  return new GetAllProgramVidInfoReq;
}

void GetAllProgramVidInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllProgramVidInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetAllProgramVidInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllProgramVidInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllProgramVidInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllProgramVidInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllProgramVidInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllProgramVidInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllProgramVidInfoReq::MergeFrom(const GetAllProgramVidInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllProgramVidInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllProgramVidInfoReq::CopyFrom(const GetAllProgramVidInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllProgramVidInfoReq::IsInitialized() const {

  return true;
}

void GetAllProgramVidInfoReq::Swap(GetAllProgramVidInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllProgramVidInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllProgramVidInfoReq_descriptor_;
  metadata.reflection = GetAllProgramVidInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllProgramVideInfoRsp::kResultFieldNumber;
const int GetAllProgramVideInfoRsp::kInfoListFieldNumber;
#endif  // !_MSC_VER

GetAllProgramVideInfoRsp::GetAllProgramVideInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllProgramVideInfoRsp::InitAsDefaultInstance() {
}

GetAllProgramVideInfoRsp::GetAllProgramVideInfoRsp(const GetAllProgramVideInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllProgramVideInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllProgramVideInfoRsp::~GetAllProgramVideInfoRsp() {
  SharedDtor();
}

void GetAllProgramVideInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllProgramVideInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllProgramVideInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllProgramVideInfoRsp_descriptor_;
}

const GetAllProgramVideInfoRsp& GetAllProgramVideInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

GetAllProgramVideInfoRsp* GetAllProgramVideInfoRsp::default_instance_ = NULL;

GetAllProgramVideInfoRsp* GetAllProgramVideInfoRsp::New() const {
  return new GetAllProgramVideInfoRsp;
}

void GetAllProgramVideInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllProgramVideInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InfoList;
        break;
      }

      // repeated .liveprogrammgr_protos.VidInfoList InfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAllProgramVideInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .liveprogrammgr_protos.VidInfoList InfoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllProgramVideInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .liveprogrammgr_protos.VidInfoList InfoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllProgramVideInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .liveprogrammgr_protos.VidInfoList InfoList = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllProgramVideInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllProgramVideInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllProgramVideInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllProgramVideInfoRsp::MergeFrom(const GetAllProgramVideInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllProgramVideInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllProgramVideInfoRsp::CopyFrom(const GetAllProgramVideInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllProgramVideInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void GetAllProgramVideInfoRsp::Swap(GetAllProgramVideInfoRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllProgramVideInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllProgramVideInfoRsp_descriptor_;
  metadata.reflection = GetAllProgramVideInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbProgramInfo::kUiVideoIdFieldNumber;
const int DbProgramInfo::kUiRoomIdFieldNumber;
const int DbProgramInfo::kUiMuxSvrIpFieldNumber;
const int DbProgramInfo::kUiStreamFormatFieldNumber;
const int DbProgramInfo::kUiBackFrameCntFieldNumber;
const int DbProgramInfo::kUiBufferFrameCountFieldNumber;
const int DbProgramInfo::kUiP2PBackTimeFieldNumber;
#endif  // !_MSC_VER

DbProgramInfo::DbProgramInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DbProgramInfo::InitAsDefaultInstance() {
}

DbProgramInfo::DbProgramInfo(const DbProgramInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DbProgramInfo::SharedCtor() {
  _cached_size_ = 0;
  uivideoid_ = 0u;
  uiroomid_ = 0u;
  uimuxsvrip_ = 0u;
  uistreamformat_ = 0u;
  uibackframecnt_ = 0u;
  uibufferframecount_ = 0u;
  uip2pbacktime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbProgramInfo::~DbProgramInfo() {
  SharedDtor();
}

void DbProgramInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DbProgramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbProgramInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbProgramInfo_descriptor_;
}

const DbProgramInfo& DbProgramInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

DbProgramInfo* DbProgramInfo::default_instance_ = NULL;

DbProgramInfo* DbProgramInfo::New() const {
  return new DbProgramInfo;
}

void DbProgramInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uivideoid_ = 0u;
    uiroomid_ = 0u;
    uimuxsvrip_ = 0u;
    uistreamformat_ = 0u;
    uibackframecnt_ = 0u;
    uibufferframecount_ = 0u;
    uip2pbacktime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbProgramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiVideoId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivideoid_)));
          set_has_uivideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiRoomId;
        break;
      }

      // required uint32 uiRoomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiroomid_)));
          set_has_uiroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMuxSvrIp;
        break;
      }

      // required uint32 uiMuxSvrIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMuxSvrIp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimuxsvrip_)));
          set_has_uimuxsvrip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiStreamFormat;
        break;
      }

      // required uint32 uiStreamFormat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiStreamFormat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uistreamformat_)));
          set_has_uistreamformat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiBackFrameCnt;
        break;
      }

      // optional uint32 uiBackFrameCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBackFrameCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibackframecnt_)));
          set_has_uibackframecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiBufferFrameCount;
        break;
      }

      // optional uint32 uiBufferFrameCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBufferFrameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibufferframecount_)));
          set_has_uibufferframecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiP2PBackTime;
        break;
      }

      // optional uint32 uiP2PBackTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiP2PBackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uip2pbacktime_)));
          set_has_uip2pbacktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DbProgramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiVideoId = 1;
  if (has_uivideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uivideoid(), output);
  }

  // required uint32 uiRoomId = 2;
  if (has_uiroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiroomid(), output);
  }

  // required uint32 uiMuxSvrIp = 3;
  if (has_uimuxsvrip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uimuxsvrip(), output);
  }

  // required uint32 uiStreamFormat = 4;
  if (has_uistreamformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uistreamformat(), output);
  }

  // optional uint32 uiBackFrameCnt = 5;
  if (has_uibackframecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uibackframecnt(), output);
  }

  // optional uint32 uiBufferFrameCount = 6;
  if (has_uibufferframecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uibufferframecount(), output);
  }

  // optional uint32 uiP2PBackTime = 7;
  if (has_uip2pbacktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uip2pbacktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DbProgramInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiVideoId = 1;
  if (has_uivideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uivideoid(), target);
  }

  // required uint32 uiRoomId = 2;
  if (has_uiroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiroomid(), target);
  }

  // required uint32 uiMuxSvrIp = 3;
  if (has_uimuxsvrip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uimuxsvrip(), target);
  }

  // required uint32 uiStreamFormat = 4;
  if (has_uistreamformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uistreamformat(), target);
  }

  // optional uint32 uiBackFrameCnt = 5;
  if (has_uibackframecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uibackframecnt(), target);
  }

  // optional uint32 uiBufferFrameCount = 6;
  if (has_uibufferframecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uibufferframecount(), target);
  }

  // optional uint32 uiP2PBackTime = 7;
  if (has_uip2pbacktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uip2pbacktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DbProgramInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiVideoId = 1;
    if (has_uivideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivideoid());
    }

    // required uint32 uiRoomId = 2;
    if (has_uiroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiroomid());
    }

    // required uint32 uiMuxSvrIp = 3;
    if (has_uimuxsvrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimuxsvrip());
    }

    // required uint32 uiStreamFormat = 4;
    if (has_uistreamformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uistreamformat());
    }

    // optional uint32 uiBackFrameCnt = 5;
    if (has_uibackframecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibackframecnt());
    }

    // optional uint32 uiBufferFrameCount = 6;
    if (has_uibufferframecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibufferframecount());
    }

    // optional uint32 uiP2PBackTime = 7;
    if (has_uip2pbacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uip2pbacktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbProgramInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbProgramInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbProgramInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbProgramInfo::MergeFrom(const DbProgramInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uivideoid()) {
      set_uivideoid(from.uivideoid());
    }
    if (from.has_uiroomid()) {
      set_uiroomid(from.uiroomid());
    }
    if (from.has_uimuxsvrip()) {
      set_uimuxsvrip(from.uimuxsvrip());
    }
    if (from.has_uistreamformat()) {
      set_uistreamformat(from.uistreamformat());
    }
    if (from.has_uibackframecnt()) {
      set_uibackframecnt(from.uibackframecnt());
    }
    if (from.has_uibufferframecount()) {
      set_uibufferframecount(from.uibufferframecount());
    }
    if (from.has_uip2pbacktime()) {
      set_uip2pbacktime(from.uip2pbacktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbProgramInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbProgramInfo::CopyFrom(const DbProgramInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbProgramInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DbProgramInfo::Swap(DbProgramInfo* other) {
  if (other != this) {
    std::swap(uivideoid_, other->uivideoid_);
    std::swap(uiroomid_, other->uiroomid_);
    std::swap(uimuxsvrip_, other->uimuxsvrip_);
    std::swap(uistreamformat_, other->uistreamformat_);
    std::swap(uibackframecnt_, other->uibackframecnt_);
    std::swap(uibufferframecount_, other->uibufferframecount_);
    std::swap(uip2pbacktime_, other->uip2pbacktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbProgramInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbProgramInfo_descriptor_;
  metadata.reflection = DbProgramInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbModuleInfo::kStrModuleFieldNumber;
const int DbModuleInfo::kUiVideoIdFieldNumber;
const int DbModuleInfo::kUiAccessTypeFieldNumber;
const int DbModuleInfo::kUiCdnTypeFieldNumber;
const int DbModuleInfo::kUiMaxBandWidthFieldNumber;
const int DbModuleInfo::kUiTotalBandWidthFieldNumber;
#endif  // !_MSC_VER

DbModuleInfo::DbModuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DbModuleInfo::InitAsDefaultInstance() {
}

DbModuleInfo::DbModuleInfo(const DbModuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DbModuleInfo::SharedCtor() {
  _cached_size_ = 0;
  strmodule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uivideoid_ = 0u;
  uiaccesstype_ = 0u;
  uicdntype_ = 0u;
  uimaxbandwidth_ = 0u;
  uitotalbandwidth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbModuleInfo::~DbModuleInfo() {
  SharedDtor();
}

void DbModuleInfo::SharedDtor() {
  if (strmodule_ != &::google::protobuf::internal::kEmptyString) {
    delete strmodule_;
  }
  if (this != default_instance_) {
  }
}

void DbModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbModuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbModuleInfo_descriptor_;
}

const DbModuleInfo& DbModuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

DbModuleInfo* DbModuleInfo::default_instance_ = NULL;

DbModuleInfo* DbModuleInfo::New() const {
  return new DbModuleInfo;
}

void DbModuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strmodule()) {
      if (strmodule_ != &::google::protobuf::internal::kEmptyString) {
        strmodule_->clear();
      }
    }
    uivideoid_ = 0u;
    uiaccesstype_ = 0u;
    uicdntype_ = 0u;
    uimaxbandwidth_ = 0u;
    uitotalbandwidth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes strModule = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmodule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiVideoId;
        break;
      }

      // required uint32 uiVideoId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiVideoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivideoid_)));
          set_has_uivideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiAccessType;
        break;
      }

      // required uint32 uiAccessType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiAccessType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiaccesstype_)));
          set_has_uiaccesstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiCdnType;
        break;
      }

      // optional uint32 uiCdnType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiCdnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uicdntype_)));
          set_has_uicdntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiMaxBandWidth;
        break;
      }

      // optional uint32 uiMaxBandWidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMaxBandWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimaxbandwidth_)));
          set_has_uimaxbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiTotalBandWidth;
        break;
      }

      // optional uint32 uiTotalBandWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiTotalBandWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitotalbandwidth_)));
          set_has_uitotalbandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DbModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes strModule = 1;
  if (has_strmodule()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->strmodule(), output);
  }

  // required uint32 uiVideoId = 2;
  if (has_uivideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uivideoid(), output);
  }

  // required uint32 uiAccessType = 3;
  if (has_uiaccesstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uiaccesstype(), output);
  }

  // optional uint32 uiCdnType = 4;
  if (has_uicdntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uicdntype(), output);
  }

  // optional uint32 uiMaxBandWidth = 5;
  if (has_uimaxbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uimaxbandwidth(), output);
  }

  // optional uint32 uiTotalBandWidth = 6;
  if (has_uitotalbandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uitotalbandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DbModuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes strModule = 1;
  if (has_strmodule()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strmodule(), target);
  }

  // required uint32 uiVideoId = 2;
  if (has_uivideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uivideoid(), target);
  }

  // required uint32 uiAccessType = 3;
  if (has_uiaccesstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uiaccesstype(), target);
  }

  // optional uint32 uiCdnType = 4;
  if (has_uicdntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uicdntype(), target);
  }

  // optional uint32 uiMaxBandWidth = 5;
  if (has_uimaxbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uimaxbandwidth(), target);
  }

  // optional uint32 uiTotalBandWidth = 6;
  if (has_uitotalbandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uitotalbandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DbModuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes strModule = 1;
    if (has_strmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmodule());
    }

    // required uint32 uiVideoId = 2;
    if (has_uivideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivideoid());
    }

    // required uint32 uiAccessType = 3;
    if (has_uiaccesstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiaccesstype());
    }

    // optional uint32 uiCdnType = 4;
    if (has_uicdntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uicdntype());
    }

    // optional uint32 uiMaxBandWidth = 5;
    if (has_uimaxbandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimaxbandwidth());
    }

    // optional uint32 uiTotalBandWidth = 6;
    if (has_uitotalbandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitotalbandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbModuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbModuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbModuleInfo::MergeFrom(const DbModuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strmodule()) {
      set_strmodule(from.strmodule());
    }
    if (from.has_uivideoid()) {
      set_uivideoid(from.uivideoid());
    }
    if (from.has_uiaccesstype()) {
      set_uiaccesstype(from.uiaccesstype());
    }
    if (from.has_uicdntype()) {
      set_uicdntype(from.uicdntype());
    }
    if (from.has_uimaxbandwidth()) {
      set_uimaxbandwidth(from.uimaxbandwidth());
    }
    if (from.has_uitotalbandwidth()) {
      set_uitotalbandwidth(from.uitotalbandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbModuleInfo::CopyFrom(const DbModuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbModuleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DbModuleInfo::Swap(DbModuleInfo* other) {
  if (other != this) {
    std::swap(strmodule_, other->strmodule_);
    std::swap(uivideoid_, other->uivideoid_);
    std::swap(uiaccesstype_, other->uiaccesstype_);
    std::swap(uicdntype_, other->uicdntype_);
    std::swap(uimaxbandwidth_, other->uimaxbandwidth_);
    std::swap(uitotalbandwidth_, other->uitotalbandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbModuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbModuleInfo_descriptor_;
  metadata.reflection = DbModuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllDbProgramInfo::kStrUpdateTimeFieldNumber;
const int AllDbProgramInfo::kDbProgramInfoListFieldNumber;
const int AllDbProgramInfo::kDbModuleInfoListFieldNumber;
#endif  // !_MSC_VER

AllDbProgramInfo::AllDbProgramInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllDbProgramInfo::InitAsDefaultInstance() {
}

AllDbProgramInfo::AllDbProgramInfo(const AllDbProgramInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllDbProgramInfo::SharedCtor() {
  _cached_size_ = 0;
  strupdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllDbProgramInfo::~AllDbProgramInfo() {
  SharedDtor();
}

void AllDbProgramInfo::SharedDtor() {
  if (strupdatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete strupdatetime_;
  }
  if (this != default_instance_) {
  }
}

void AllDbProgramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllDbProgramInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllDbProgramInfo_descriptor_;
}

const AllDbProgramInfo& AllDbProgramInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LiveProgramMgr_2eproto();
  return *default_instance_;
}

AllDbProgramInfo* AllDbProgramInfo::default_instance_ = NULL;

AllDbProgramInfo* AllDbProgramInfo::New() const {
  return new AllDbProgramInfo;
}

void AllDbProgramInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strupdatetime()) {
      if (strupdatetime_ != &::google::protobuf::internal::kEmptyString) {
        strupdatetime_->clear();
      }
    }
  }
  dbprograminfolist_.Clear();
  dbmoduleinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllDbProgramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes strUpdateTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strupdatetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dbProgramInfoList;
        break;
      }

      // repeated .liveprogrammgr_protos.DbProgramInfo dbProgramInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbProgramInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbprograminfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dbProgramInfoList;
        if (input->ExpectTag(26)) goto parse_dbModuleInfoList;
        break;
      }

      // repeated .liveprogrammgr_protos.DbModuleInfo dbModuleInfoList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbModuleInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dbmoduleinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dbModuleInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllDbProgramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes strUpdateTime = 1;
  if (has_strupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->strupdatetime(), output);
  }

  // repeated .liveprogrammgr_protos.DbProgramInfo dbProgramInfoList = 2;
  for (int i = 0; i < this->dbprograminfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dbprograminfolist(i), output);
  }

  // repeated .liveprogrammgr_protos.DbModuleInfo dbModuleInfoList = 3;
  for (int i = 0; i < this->dbmoduleinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dbmoduleinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllDbProgramInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes strUpdateTime = 1;
  if (has_strupdatetime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strupdatetime(), target);
  }

  // repeated .liveprogrammgr_protos.DbProgramInfo dbProgramInfoList = 2;
  for (int i = 0; i < this->dbprograminfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dbprograminfolist(i), target);
  }

  // repeated .liveprogrammgr_protos.DbModuleInfo dbModuleInfoList = 3;
  for (int i = 0; i < this->dbmoduleinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dbmoduleinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllDbProgramInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes strUpdateTime = 1;
    if (has_strupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strupdatetime());
    }

  }
  // repeated .liveprogrammgr_protos.DbProgramInfo dbProgramInfoList = 2;
  total_size += 1 * this->dbprograminfolist_size();
  for (int i = 0; i < this->dbprograminfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dbprograminfolist(i));
  }

  // repeated .liveprogrammgr_protos.DbModuleInfo dbModuleInfoList = 3;
  total_size += 1 * this->dbmoduleinfolist_size();
  for (int i = 0; i < this->dbmoduleinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dbmoduleinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllDbProgramInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllDbProgramInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllDbProgramInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllDbProgramInfo::MergeFrom(const AllDbProgramInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dbprograminfolist_.MergeFrom(from.dbprograminfolist_);
  dbmoduleinfolist_.MergeFrom(from.dbmoduleinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strupdatetime()) {
      set_strupdatetime(from.strupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllDbProgramInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllDbProgramInfo::CopyFrom(const AllDbProgramInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDbProgramInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < dbprograminfolist_size(); i++) {
    if (!this->dbprograminfolist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dbmoduleinfolist_size(); i++) {
    if (!this->dbmoduleinfolist(i).IsInitialized()) return false;
  }
  return true;
}

void AllDbProgramInfo::Swap(AllDbProgramInfo* other) {
  if (other != this) {
    std::swap(strupdatetime_, other->strupdatetime_);
    dbprograminfolist_.Swap(&other->dbprograminfolist_);
    dbmoduleinfolist_.Swap(&other->dbmoduleinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllDbProgramInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllDbProgramInfo_descriptor_;
  metadata.reflection = AllDbProgramInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace liveprogrammgr_protos

// @@protoc_insertion_point(global_scope)
