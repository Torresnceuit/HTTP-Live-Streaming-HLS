// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: muxsvr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "muxsvr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace muxsvr_protos {

namespace {

const ::google::protobuf::Descriptor* SMuxFrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMuxFrameInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_muxsvr_2eproto() {
  protobuf_AddDesc_muxsvr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "muxsvr.proto");
  GOOGLE_CHECK(file != NULL);
  SMuxFrameInfo_descriptor_ = file->message_type(0);
  static const int SMuxFrameInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uimainroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiframeseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uivideoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiroomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uikeyframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, strmediainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, strframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uifps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uibitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiframeorignsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uiframetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, uioriginalvideoid_),
  };
  SMuxFrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMuxFrameInfo_descriptor_,
      SMuxFrameInfo::default_instance_,
      SMuxFrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMuxFrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMuxFrameInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_muxsvr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMuxFrameInfo_descriptor_, &SMuxFrameInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_muxsvr_2eproto() {
  delete SMuxFrameInfo::default_instance_;
  delete SMuxFrameInfo_reflection_;
}

void protobuf_AddDesc_muxsvr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014muxsvr.proto\022\rmuxsvr_protos\"\314\002\n\rSMuxFr"
    "ameInfo\022\r\n\005uiUin\030\001 \002(\r\022\020\n\010uiRoomId\030\002 \002(\r"
    "\022\024\n\014uiMainRoomId\030\003 \002(\r\022\022\n\nuiFrameSeq\030\004 \002"
    "(\r\022\021\n\tuiVideoId\030\005 \002(\r\022\022\n\nuiRoomType\030\006 \002("
    "\r\022\022\n\nuiKeyFrame\030\007 \002(\r\022\024\n\014StrMediaInfo\030\010 "
    "\002(\014\022\020\n\010StrFrame\030\t \002(\014\022\017\n\007uiWidth\030\n \002(\r\022\020"
    "\n\010uiHeight\030\013 \002(\r\022\r\n\005uiFps\030\014 \002(\r\022\021\n\tuiBit"
    "Rate\030\r \002(\r\022\030\n\020uiFrameOrignSize\030\016 \002(\r\022\023\n\013"
    "uiFrameTime\030\017 \002(\r\022\031\n\021uiOriginalVideoId\030\020"
    " \001(\r", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "muxsvr.proto", &protobuf_RegisterTypes);
  SMuxFrameInfo::default_instance_ = new SMuxFrameInfo();
  SMuxFrameInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_muxsvr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_muxsvr_2eproto {
  StaticDescriptorInitializer_muxsvr_2eproto() {
    protobuf_AddDesc_muxsvr_2eproto();
  }
} static_descriptor_initializer_muxsvr_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SMuxFrameInfo::kUiUinFieldNumber;
const int SMuxFrameInfo::kUiRoomIdFieldNumber;
const int SMuxFrameInfo::kUiMainRoomIdFieldNumber;
const int SMuxFrameInfo::kUiFrameSeqFieldNumber;
const int SMuxFrameInfo::kUiVideoIdFieldNumber;
const int SMuxFrameInfo::kUiRoomTypeFieldNumber;
const int SMuxFrameInfo::kUiKeyFrameFieldNumber;
const int SMuxFrameInfo::kStrMediaInfoFieldNumber;
const int SMuxFrameInfo::kStrFrameFieldNumber;
const int SMuxFrameInfo::kUiWidthFieldNumber;
const int SMuxFrameInfo::kUiHeightFieldNumber;
const int SMuxFrameInfo::kUiFpsFieldNumber;
const int SMuxFrameInfo::kUiBitRateFieldNumber;
const int SMuxFrameInfo::kUiFrameOrignSizeFieldNumber;
const int SMuxFrameInfo::kUiFrameTimeFieldNumber;
const int SMuxFrameInfo::kUiOriginalVideoIdFieldNumber;
#endif  // !_MSC_VER

SMuxFrameInfo::SMuxFrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMuxFrameInfo::InitAsDefaultInstance() {
}

SMuxFrameInfo::SMuxFrameInfo(const SMuxFrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMuxFrameInfo::SharedCtor() {
  _cached_size_ = 0;
  uiuin_ = 0u;
  uiroomid_ = 0u;
  uimainroomid_ = 0u;
  uiframeseq_ = 0u;
  uivideoid_ = 0u;
  uiroomtype_ = 0u;
  uikeyframe_ = 0u;
  strmediainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strframe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uiwidth_ = 0u;
  uiheight_ = 0u;
  uifps_ = 0u;
  uibitrate_ = 0u;
  uiframeorignsize_ = 0u;
  uiframetime_ = 0u;
  uioriginalvideoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMuxFrameInfo::~SMuxFrameInfo() {
  SharedDtor();
}

void SMuxFrameInfo::SharedDtor() {
  if (strmediainfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strmediainfo_;
  }
  if (strframe_ != &::google::protobuf::internal::kEmptyString) {
    delete strframe_;
  }
  if (this != default_instance_) {
  }
}

void SMuxFrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMuxFrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMuxFrameInfo_descriptor_;
}

const SMuxFrameInfo& SMuxFrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_muxsvr_2eproto();
  return *default_instance_;
}

SMuxFrameInfo* SMuxFrameInfo::default_instance_ = NULL;

SMuxFrameInfo* SMuxFrameInfo::New() const {
  return new SMuxFrameInfo;
}

void SMuxFrameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiuin_ = 0u;
    uiroomid_ = 0u;
    uimainroomid_ = 0u;
    uiframeseq_ = 0u;
    uivideoid_ = 0u;
    uiroomtype_ = 0u;
    uikeyframe_ = 0u;
    if (has_strmediainfo()) {
      if (strmediainfo_ != &::google::protobuf::internal::kEmptyString) {
        strmediainfo_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strframe()) {
      if (strframe_ != &::google::protobuf::internal::kEmptyString) {
        strframe_->clear();
      }
    }
    uiwidth_ = 0u;
    uiheight_ = 0u;
    uifps_ = 0u;
    uibitrate_ = 0u;
    uiframeorignsize_ = 0u;
    uiframetime_ = 0u;
    uioriginalvideoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMuxFrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uiUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuin_)));
          set_has_uiuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiRoomId;
        break;
      }

      // required uint32 uiRoomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiroomid_)));
          set_has_uiroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiMainRoomId;
        break;
      }

      // required uint32 uiMainRoomId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiMainRoomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimainroomid_)));
          set_has_uimainroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiFrameSeq;
        break;
      }

      // required uint32 uiFrameSeq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFrameSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiframeseq_)));
          set_has_uiframeseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uiVideoId;
        break;
      }

      // required uint32 uiVideoId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiVideoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uivideoid_)));
          set_has_uivideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uiRoomType;
        break;
      }

      // required uint32 uiRoomType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiRoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiroomtype_)));
          set_has_uiroomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_uiKeyFrame;
        break;
      }

      // required uint32 uiKeyFrame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiKeyFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uikeyframe_)));
          set_has_uikeyframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_StrMediaInfo;
        break;
      }

      // required bytes StrMediaInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrMediaInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmediainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_StrFrame;
        break;
      }

      // required bytes StrFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StrFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_uiWidth;
        break;
      }

      // required uint32 uiWidth = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiwidth_)));
          set_has_uiwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_uiHeight;
        break;
      }

      // required uint32 uiHeight = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiheight_)));
          set_has_uiheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_uiFps;
        break;
      }

      // required uint32 uiFps = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uifps_)));
          set_has_uifps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_uiBitRate;
        break;
      }

      // required uint32 uiBitRate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiBitRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uibitrate_)));
          set_has_uibitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_uiFrameOrignSize;
        break;
      }

      // required uint32 uiFrameOrignSize = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFrameOrignSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiframeorignsize_)));
          set_has_uiframeorignsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_uiFrameTime;
        break;
      }

      // required uint32 uiFrameTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFrameTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiframetime_)));
          set_has_uiframetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_uiOriginalVideoId;
        break;
      }

      // optional uint32 uiOriginalVideoId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiOriginalVideoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uioriginalvideoid_)));
          set_has_uioriginalvideoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMuxFrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uiUin = 1;
  if (has_uiuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuin(), output);
  }

  // required uint32 uiRoomId = 2;
  if (has_uiroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiroomid(), output);
  }

  // required uint32 uiMainRoomId = 3;
  if (has_uimainroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uimainroomid(), output);
  }

  // required uint32 uiFrameSeq = 4;
  if (has_uiframeseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uiframeseq(), output);
  }

  // required uint32 uiVideoId = 5;
  if (has_uivideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uivideoid(), output);
  }

  // required uint32 uiRoomType = 6;
  if (has_uiroomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uiroomtype(), output);
  }

  // required uint32 uiKeyFrame = 7;
  if (has_uikeyframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->uikeyframe(), output);
  }

  // required bytes StrMediaInfo = 8;
  if (has_strmediainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->strmediainfo(), output);
  }

  // required bytes StrFrame = 9;
  if (has_strframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->strframe(), output);
  }

  // required uint32 uiWidth = 10;
  if (has_uiwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uiwidth(), output);
  }

  // required uint32 uiHeight = 11;
  if (has_uiheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uiheight(), output);
  }

  // required uint32 uiFps = 12;
  if (has_uifps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->uifps(), output);
  }

  // required uint32 uiBitRate = 13;
  if (has_uibitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->uibitrate(), output);
  }

  // required uint32 uiFrameOrignSize = 14;
  if (has_uiframeorignsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->uiframeorignsize(), output);
  }

  // required uint32 uiFrameTime = 15;
  if (has_uiframetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->uiframetime(), output);
  }

  // optional uint32 uiOriginalVideoId = 16;
  if (has_uioriginalvideoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->uioriginalvideoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMuxFrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uiUin = 1;
  if (has_uiuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuin(), target);
  }

  // required uint32 uiRoomId = 2;
  if (has_uiroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiroomid(), target);
  }

  // required uint32 uiMainRoomId = 3;
  if (has_uimainroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uimainroomid(), target);
  }

  // required uint32 uiFrameSeq = 4;
  if (has_uiframeseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uiframeseq(), target);
  }

  // required uint32 uiVideoId = 5;
  if (has_uivideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uivideoid(), target);
  }

  // required uint32 uiRoomType = 6;
  if (has_uiroomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uiroomtype(), target);
  }

  // required uint32 uiKeyFrame = 7;
  if (has_uikeyframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->uikeyframe(), target);
  }

  // required bytes StrMediaInfo = 8;
  if (has_strmediainfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->strmediainfo(), target);
  }

  // required bytes StrFrame = 9;
  if (has_strframe()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->strframe(), target);
  }

  // required uint32 uiWidth = 10;
  if (has_uiwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uiwidth(), target);
  }

  // required uint32 uiHeight = 11;
  if (has_uiheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uiheight(), target);
  }

  // required uint32 uiFps = 12;
  if (has_uifps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->uifps(), target);
  }

  // required uint32 uiBitRate = 13;
  if (has_uibitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->uibitrate(), target);
  }

  // required uint32 uiFrameOrignSize = 14;
  if (has_uiframeorignsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->uiframeorignsize(), target);
  }

  // required uint32 uiFrameTime = 15;
  if (has_uiframetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->uiframetime(), target);
  }

  // optional uint32 uiOriginalVideoId = 16;
  if (has_uioriginalvideoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->uioriginalvideoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMuxFrameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uiUin = 1;
    if (has_uiuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiuin());
    }

    // required uint32 uiRoomId = 2;
    if (has_uiroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiroomid());
    }

    // required uint32 uiMainRoomId = 3;
    if (has_uimainroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimainroomid());
    }

    // required uint32 uiFrameSeq = 4;
    if (has_uiframeseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiframeseq());
    }

    // required uint32 uiVideoId = 5;
    if (has_uivideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uivideoid());
    }

    // required uint32 uiRoomType = 6;
    if (has_uiroomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiroomtype());
    }

    // required uint32 uiKeyFrame = 7;
    if (has_uikeyframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uikeyframe());
    }

    // required bytes StrMediaInfo = 8;
    if (has_strmediainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmediainfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes StrFrame = 9;
    if (has_strframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strframe());
    }

    // required uint32 uiWidth = 10;
    if (has_uiwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiwidth());
    }

    // required uint32 uiHeight = 11;
    if (has_uiheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiheight());
    }

    // required uint32 uiFps = 12;
    if (has_uifps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uifps());
    }

    // required uint32 uiBitRate = 13;
    if (has_uibitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uibitrate());
    }

    // required uint32 uiFrameOrignSize = 14;
    if (has_uiframeorignsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiframeorignsize());
    }

    // required uint32 uiFrameTime = 15;
    if (has_uiframetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiframetime());
    }

    // optional uint32 uiOriginalVideoId = 16;
    if (has_uioriginalvideoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uioriginalvideoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMuxFrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMuxFrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMuxFrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMuxFrameInfo::MergeFrom(const SMuxFrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiuin()) {
      set_uiuin(from.uiuin());
    }
    if (from.has_uiroomid()) {
      set_uiroomid(from.uiroomid());
    }
    if (from.has_uimainroomid()) {
      set_uimainroomid(from.uimainroomid());
    }
    if (from.has_uiframeseq()) {
      set_uiframeseq(from.uiframeseq());
    }
    if (from.has_uivideoid()) {
      set_uivideoid(from.uivideoid());
    }
    if (from.has_uiroomtype()) {
      set_uiroomtype(from.uiroomtype());
    }
    if (from.has_uikeyframe()) {
      set_uikeyframe(from.uikeyframe());
    }
    if (from.has_strmediainfo()) {
      set_strmediainfo(from.strmediainfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strframe()) {
      set_strframe(from.strframe());
    }
    if (from.has_uiwidth()) {
      set_uiwidth(from.uiwidth());
    }
    if (from.has_uiheight()) {
      set_uiheight(from.uiheight());
    }
    if (from.has_uifps()) {
      set_uifps(from.uifps());
    }
    if (from.has_uibitrate()) {
      set_uibitrate(from.uibitrate());
    }
    if (from.has_uiframeorignsize()) {
      set_uiframeorignsize(from.uiframeorignsize());
    }
    if (from.has_uiframetime()) {
      set_uiframetime(from.uiframetime());
    }
    if (from.has_uioriginalvideoid()) {
      set_uioriginalvideoid(from.uioriginalvideoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMuxFrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMuxFrameInfo::CopyFrom(const SMuxFrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMuxFrameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void SMuxFrameInfo::Swap(SMuxFrameInfo* other) {
  if (other != this) {
    std::swap(uiuin_, other->uiuin_);
    std::swap(uiroomid_, other->uiroomid_);
    std::swap(uimainroomid_, other->uimainroomid_);
    std::swap(uiframeseq_, other->uiframeseq_);
    std::swap(uivideoid_, other->uivideoid_);
    std::swap(uiroomtype_, other->uiroomtype_);
    std::swap(uikeyframe_, other->uikeyframe_);
    std::swap(strmediainfo_, other->strmediainfo_);
    std::swap(strframe_, other->strframe_);
    std::swap(uiwidth_, other->uiwidth_);
    std::swap(uiheight_, other->uiheight_);
    std::swap(uifps_, other->uifps_);
    std::swap(uibitrate_, other->uibitrate_);
    std::swap(uiframeorignsize_, other->uiframeorignsize_);
    std::swap(uiframetime_, other->uiframetime_);
    std::swap(uioriginalvideoid_, other->uioriginalvideoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMuxFrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMuxFrameInfo_descriptor_;
  metadata.reflection = SMuxFrameInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace muxsvr_protos

// @@protoc_insertion_point(global_scope)
