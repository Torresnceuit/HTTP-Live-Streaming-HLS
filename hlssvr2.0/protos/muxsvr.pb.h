// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: muxsvr.proto

#ifndef PROTOBUF_muxsvr_2eproto__INCLUDED
#define PROTOBUF_muxsvr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace muxsvr_protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_muxsvr_2eproto();
void protobuf_AssignDesc_muxsvr_2eproto();
void protobuf_ShutdownFile_muxsvr_2eproto();

class SMuxFrameInfo;

// ===================================================================

class SMuxFrameInfo : public ::google::protobuf::Message {
 public:
  SMuxFrameInfo();
  virtual ~SMuxFrameInfo();

  SMuxFrameInfo(const SMuxFrameInfo& from);

  inline SMuxFrameInfo& operator=(const SMuxFrameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SMuxFrameInfo& default_instance();

  void Swap(SMuxFrameInfo* other);

  // implements Message ----------------------------------------------

  SMuxFrameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMuxFrameInfo& from);
  void MergeFrom(const SMuxFrameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uiUin = 1;
  inline bool has_uiuin() const;
  inline void clear_uiuin();
  static const int kUiUinFieldNumber = 1;
  inline ::google::protobuf::uint32 uiuin() const;
  inline void set_uiuin(::google::protobuf::uint32 value);

  // required uint32 uiRoomId = 2;
  inline bool has_uiroomid() const;
  inline void clear_uiroomid();
  static const int kUiRoomIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uiroomid() const;
  inline void set_uiroomid(::google::protobuf::uint32 value);

  // required uint32 uiMainRoomId = 3;
  inline bool has_uimainroomid() const;
  inline void clear_uimainroomid();
  static const int kUiMainRoomIdFieldNumber = 3;
  inline ::google::protobuf::uint32 uimainroomid() const;
  inline void set_uimainroomid(::google::protobuf::uint32 value);

  // required uint32 uiFrameSeq = 4;
  inline bool has_uiframeseq() const;
  inline void clear_uiframeseq();
  static const int kUiFrameSeqFieldNumber = 4;
  inline ::google::protobuf::uint32 uiframeseq() const;
  inline void set_uiframeseq(::google::protobuf::uint32 value);

  // required uint32 uiVideoId = 5;
  inline bool has_uivideoid() const;
  inline void clear_uivideoid();
  static const int kUiVideoIdFieldNumber = 5;
  inline ::google::protobuf::uint32 uivideoid() const;
  inline void set_uivideoid(::google::protobuf::uint32 value);

  // required uint32 uiRoomType = 6;
  inline bool has_uiroomtype() const;
  inline void clear_uiroomtype();
  static const int kUiRoomTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 uiroomtype() const;
  inline void set_uiroomtype(::google::protobuf::uint32 value);

  // required uint32 uiKeyFrame = 7;
  inline bool has_uikeyframe() const;
  inline void clear_uikeyframe();
  static const int kUiKeyFrameFieldNumber = 7;
  inline ::google::protobuf::uint32 uikeyframe() const;
  inline void set_uikeyframe(::google::protobuf::uint32 value);

  // required bytes StrMediaInfo = 8;
  inline bool has_strmediainfo() const;
  inline void clear_strmediainfo();
  static const int kStrMediaInfoFieldNumber = 8;
  inline const ::std::string& strmediainfo() const;
  inline void set_strmediainfo(const ::std::string& value);
  inline void set_strmediainfo(const char* value);
  inline void set_strmediainfo(const void* value, size_t size);
  inline ::std::string* mutable_strmediainfo();
  inline ::std::string* release_strmediainfo();
  inline void set_allocated_strmediainfo(::std::string* strmediainfo);

  // required bytes StrFrame = 9;
  inline bool has_strframe() const;
  inline void clear_strframe();
  static const int kStrFrameFieldNumber = 9;
  inline const ::std::string& strframe() const;
  inline void set_strframe(const ::std::string& value);
  inline void set_strframe(const char* value);
  inline void set_strframe(const void* value, size_t size);
  inline ::std::string* mutable_strframe();
  inline ::std::string* release_strframe();
  inline void set_allocated_strframe(::std::string* strframe);

  // required uint32 uiWidth = 10;
  inline bool has_uiwidth() const;
  inline void clear_uiwidth();
  static const int kUiWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 uiwidth() const;
  inline void set_uiwidth(::google::protobuf::uint32 value);

  // required uint32 uiHeight = 11;
  inline bool has_uiheight() const;
  inline void clear_uiheight();
  static const int kUiHeightFieldNumber = 11;
  inline ::google::protobuf::uint32 uiheight() const;
  inline void set_uiheight(::google::protobuf::uint32 value);

  // required uint32 uiFps = 12;
  inline bool has_uifps() const;
  inline void clear_uifps();
  static const int kUiFpsFieldNumber = 12;
  inline ::google::protobuf::uint32 uifps() const;
  inline void set_uifps(::google::protobuf::uint32 value);

  // required uint32 uiBitRate = 13;
  inline bool has_uibitrate() const;
  inline void clear_uibitrate();
  static const int kUiBitRateFieldNumber = 13;
  inline ::google::protobuf::uint32 uibitrate() const;
  inline void set_uibitrate(::google::protobuf::uint32 value);

  // required uint32 uiFrameOrignSize = 14;
  inline bool has_uiframeorignsize() const;
  inline void clear_uiframeorignsize();
  static const int kUiFrameOrignSizeFieldNumber = 14;
  inline ::google::protobuf::uint32 uiframeorignsize() const;
  inline void set_uiframeorignsize(::google::protobuf::uint32 value);

  // required uint32 uiFrameTime = 15;
  inline bool has_uiframetime() const;
  inline void clear_uiframetime();
  static const int kUiFrameTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 uiframetime() const;
  inline void set_uiframetime(::google::protobuf::uint32 value);

  // optional uint32 uiOriginalVideoId = 16;
  inline bool has_uioriginalvideoid() const;
  inline void clear_uioriginalvideoid();
  static const int kUiOriginalVideoIdFieldNumber = 16;
  inline ::google::protobuf::uint32 uioriginalvideoid() const;
  inline void set_uioriginalvideoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:muxsvr_protos.SMuxFrameInfo)
 private:
  inline void set_has_uiuin();
  inline void clear_has_uiuin();
  inline void set_has_uiroomid();
  inline void clear_has_uiroomid();
  inline void set_has_uimainroomid();
  inline void clear_has_uimainroomid();
  inline void set_has_uiframeseq();
  inline void clear_has_uiframeseq();
  inline void set_has_uivideoid();
  inline void clear_has_uivideoid();
  inline void set_has_uiroomtype();
  inline void clear_has_uiroomtype();
  inline void set_has_uikeyframe();
  inline void clear_has_uikeyframe();
  inline void set_has_strmediainfo();
  inline void clear_has_strmediainfo();
  inline void set_has_strframe();
  inline void clear_has_strframe();
  inline void set_has_uiwidth();
  inline void clear_has_uiwidth();
  inline void set_has_uiheight();
  inline void clear_has_uiheight();
  inline void set_has_uifps();
  inline void clear_has_uifps();
  inline void set_has_uibitrate();
  inline void clear_has_uibitrate();
  inline void set_has_uiframeorignsize();
  inline void clear_has_uiframeorignsize();
  inline void set_has_uiframetime();
  inline void clear_has_uiframetime();
  inline void set_has_uioriginalvideoid();
  inline void clear_has_uioriginalvideoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uiuin_;
  ::google::protobuf::uint32 uiroomid_;
  ::google::protobuf::uint32 uimainroomid_;
  ::google::protobuf::uint32 uiframeseq_;
  ::google::protobuf::uint32 uivideoid_;
  ::google::protobuf::uint32 uiroomtype_;
  ::std::string* strmediainfo_;
  ::google::protobuf::uint32 uikeyframe_;
  ::google::protobuf::uint32 uiwidth_;
  ::std::string* strframe_;
  ::google::protobuf::uint32 uiheight_;
  ::google::protobuf::uint32 uifps_;
  ::google::protobuf::uint32 uibitrate_;
  ::google::protobuf::uint32 uiframeorignsize_;
  ::google::protobuf::uint32 uiframetime_;
  ::google::protobuf::uint32 uioriginalvideoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_muxsvr_2eproto();
  friend void protobuf_AssignDesc_muxsvr_2eproto();
  friend void protobuf_ShutdownFile_muxsvr_2eproto();

  void InitAsDefaultInstance();
  static SMuxFrameInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// SMuxFrameInfo

// required uint32 uiUin = 1;
inline bool SMuxFrameInfo::has_uiuin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMuxFrameInfo::set_has_uiuin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMuxFrameInfo::clear_has_uiuin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMuxFrameInfo::clear_uiuin() {
  uiuin_ = 0u;
  clear_has_uiuin();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiuin() const {
  return uiuin_;
}
inline void SMuxFrameInfo::set_uiuin(::google::protobuf::uint32 value) {
  set_has_uiuin();
  uiuin_ = value;
}

// required uint32 uiRoomId = 2;
inline bool SMuxFrameInfo::has_uiroomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMuxFrameInfo::set_has_uiroomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMuxFrameInfo::clear_has_uiroomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMuxFrameInfo::clear_uiroomid() {
  uiroomid_ = 0u;
  clear_has_uiroomid();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiroomid() const {
  return uiroomid_;
}
inline void SMuxFrameInfo::set_uiroomid(::google::protobuf::uint32 value) {
  set_has_uiroomid();
  uiroomid_ = value;
}

// required uint32 uiMainRoomId = 3;
inline bool SMuxFrameInfo::has_uimainroomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMuxFrameInfo::set_has_uimainroomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMuxFrameInfo::clear_has_uimainroomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMuxFrameInfo::clear_uimainroomid() {
  uimainroomid_ = 0u;
  clear_has_uimainroomid();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uimainroomid() const {
  return uimainroomid_;
}
inline void SMuxFrameInfo::set_uimainroomid(::google::protobuf::uint32 value) {
  set_has_uimainroomid();
  uimainroomid_ = value;
}

// required uint32 uiFrameSeq = 4;
inline bool SMuxFrameInfo::has_uiframeseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMuxFrameInfo::set_has_uiframeseq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMuxFrameInfo::clear_has_uiframeseq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMuxFrameInfo::clear_uiframeseq() {
  uiframeseq_ = 0u;
  clear_has_uiframeseq();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiframeseq() const {
  return uiframeseq_;
}
inline void SMuxFrameInfo::set_uiframeseq(::google::protobuf::uint32 value) {
  set_has_uiframeseq();
  uiframeseq_ = value;
}

// required uint32 uiVideoId = 5;
inline bool SMuxFrameInfo::has_uivideoid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMuxFrameInfo::set_has_uivideoid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMuxFrameInfo::clear_has_uivideoid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMuxFrameInfo::clear_uivideoid() {
  uivideoid_ = 0u;
  clear_has_uivideoid();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uivideoid() const {
  return uivideoid_;
}
inline void SMuxFrameInfo::set_uivideoid(::google::protobuf::uint32 value) {
  set_has_uivideoid();
  uivideoid_ = value;
}

// required uint32 uiRoomType = 6;
inline bool SMuxFrameInfo::has_uiroomtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SMuxFrameInfo::set_has_uiroomtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SMuxFrameInfo::clear_has_uiroomtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SMuxFrameInfo::clear_uiroomtype() {
  uiroomtype_ = 0u;
  clear_has_uiroomtype();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiroomtype() const {
  return uiroomtype_;
}
inline void SMuxFrameInfo::set_uiroomtype(::google::protobuf::uint32 value) {
  set_has_uiroomtype();
  uiroomtype_ = value;
}

// required uint32 uiKeyFrame = 7;
inline bool SMuxFrameInfo::has_uikeyframe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SMuxFrameInfo::set_has_uikeyframe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SMuxFrameInfo::clear_has_uikeyframe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SMuxFrameInfo::clear_uikeyframe() {
  uikeyframe_ = 0u;
  clear_has_uikeyframe();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uikeyframe() const {
  return uikeyframe_;
}
inline void SMuxFrameInfo::set_uikeyframe(::google::protobuf::uint32 value) {
  set_has_uikeyframe();
  uikeyframe_ = value;
}

// required bytes StrMediaInfo = 8;
inline bool SMuxFrameInfo::has_strmediainfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SMuxFrameInfo::set_has_strmediainfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SMuxFrameInfo::clear_has_strmediainfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SMuxFrameInfo::clear_strmediainfo() {
  if (strmediainfo_ != &::google::protobuf::internal::kEmptyString) {
    strmediainfo_->clear();
  }
  clear_has_strmediainfo();
}
inline const ::std::string& SMuxFrameInfo::strmediainfo() const {
  return *strmediainfo_;
}
inline void SMuxFrameInfo::set_strmediainfo(const ::std::string& value) {
  set_has_strmediainfo();
  if (strmediainfo_ == &::google::protobuf::internal::kEmptyString) {
    strmediainfo_ = new ::std::string;
  }
  strmediainfo_->assign(value);
}
inline void SMuxFrameInfo::set_strmediainfo(const char* value) {
  set_has_strmediainfo();
  if (strmediainfo_ == &::google::protobuf::internal::kEmptyString) {
    strmediainfo_ = new ::std::string;
  }
  strmediainfo_->assign(value);
}
inline void SMuxFrameInfo::set_strmediainfo(const void* value, size_t size) {
  set_has_strmediainfo();
  if (strmediainfo_ == &::google::protobuf::internal::kEmptyString) {
    strmediainfo_ = new ::std::string;
  }
  strmediainfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SMuxFrameInfo::mutable_strmediainfo() {
  set_has_strmediainfo();
  if (strmediainfo_ == &::google::protobuf::internal::kEmptyString) {
    strmediainfo_ = new ::std::string;
  }
  return strmediainfo_;
}
inline ::std::string* SMuxFrameInfo::release_strmediainfo() {
  clear_has_strmediainfo();
  if (strmediainfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strmediainfo_;
    strmediainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SMuxFrameInfo::set_allocated_strmediainfo(::std::string* strmediainfo) {
  if (strmediainfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strmediainfo_;
  }
  if (strmediainfo) {
    set_has_strmediainfo();
    strmediainfo_ = strmediainfo;
  } else {
    clear_has_strmediainfo();
    strmediainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes StrFrame = 9;
inline bool SMuxFrameInfo::has_strframe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SMuxFrameInfo::set_has_strframe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SMuxFrameInfo::clear_has_strframe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SMuxFrameInfo::clear_strframe() {
  if (strframe_ != &::google::protobuf::internal::kEmptyString) {
    strframe_->clear();
  }
  clear_has_strframe();
}
inline const ::std::string& SMuxFrameInfo::strframe() const {
  return *strframe_;
}
inline void SMuxFrameInfo::set_strframe(const ::std::string& value) {
  set_has_strframe();
  if (strframe_ == &::google::protobuf::internal::kEmptyString) {
    strframe_ = new ::std::string;
  }
  strframe_->assign(value);
}
inline void SMuxFrameInfo::set_strframe(const char* value) {
  set_has_strframe();
  if (strframe_ == &::google::protobuf::internal::kEmptyString) {
    strframe_ = new ::std::string;
  }
  strframe_->assign(value);
}
inline void SMuxFrameInfo::set_strframe(const void* value, size_t size) {
  set_has_strframe();
  if (strframe_ == &::google::protobuf::internal::kEmptyString) {
    strframe_ = new ::std::string;
  }
  strframe_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SMuxFrameInfo::mutable_strframe() {
  set_has_strframe();
  if (strframe_ == &::google::protobuf::internal::kEmptyString) {
    strframe_ = new ::std::string;
  }
  return strframe_;
}
inline ::std::string* SMuxFrameInfo::release_strframe() {
  clear_has_strframe();
  if (strframe_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strframe_;
    strframe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SMuxFrameInfo::set_allocated_strframe(::std::string* strframe) {
  if (strframe_ != &::google::protobuf::internal::kEmptyString) {
    delete strframe_;
  }
  if (strframe) {
    set_has_strframe();
    strframe_ = strframe;
  } else {
    clear_has_strframe();
    strframe_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 uiWidth = 10;
inline bool SMuxFrameInfo::has_uiwidth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SMuxFrameInfo::set_has_uiwidth() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SMuxFrameInfo::clear_has_uiwidth() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SMuxFrameInfo::clear_uiwidth() {
  uiwidth_ = 0u;
  clear_has_uiwidth();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiwidth() const {
  return uiwidth_;
}
inline void SMuxFrameInfo::set_uiwidth(::google::protobuf::uint32 value) {
  set_has_uiwidth();
  uiwidth_ = value;
}

// required uint32 uiHeight = 11;
inline bool SMuxFrameInfo::has_uiheight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SMuxFrameInfo::set_has_uiheight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SMuxFrameInfo::clear_has_uiheight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SMuxFrameInfo::clear_uiheight() {
  uiheight_ = 0u;
  clear_has_uiheight();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiheight() const {
  return uiheight_;
}
inline void SMuxFrameInfo::set_uiheight(::google::protobuf::uint32 value) {
  set_has_uiheight();
  uiheight_ = value;
}

// required uint32 uiFps = 12;
inline bool SMuxFrameInfo::has_uifps() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SMuxFrameInfo::set_has_uifps() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SMuxFrameInfo::clear_has_uifps() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SMuxFrameInfo::clear_uifps() {
  uifps_ = 0u;
  clear_has_uifps();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uifps() const {
  return uifps_;
}
inline void SMuxFrameInfo::set_uifps(::google::protobuf::uint32 value) {
  set_has_uifps();
  uifps_ = value;
}

// required uint32 uiBitRate = 13;
inline bool SMuxFrameInfo::has_uibitrate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SMuxFrameInfo::set_has_uibitrate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SMuxFrameInfo::clear_has_uibitrate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SMuxFrameInfo::clear_uibitrate() {
  uibitrate_ = 0u;
  clear_has_uibitrate();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uibitrate() const {
  return uibitrate_;
}
inline void SMuxFrameInfo::set_uibitrate(::google::protobuf::uint32 value) {
  set_has_uibitrate();
  uibitrate_ = value;
}

// required uint32 uiFrameOrignSize = 14;
inline bool SMuxFrameInfo::has_uiframeorignsize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SMuxFrameInfo::set_has_uiframeorignsize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SMuxFrameInfo::clear_has_uiframeorignsize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SMuxFrameInfo::clear_uiframeorignsize() {
  uiframeorignsize_ = 0u;
  clear_has_uiframeorignsize();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiframeorignsize() const {
  return uiframeorignsize_;
}
inline void SMuxFrameInfo::set_uiframeorignsize(::google::protobuf::uint32 value) {
  set_has_uiframeorignsize();
  uiframeorignsize_ = value;
}

// required uint32 uiFrameTime = 15;
inline bool SMuxFrameInfo::has_uiframetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SMuxFrameInfo::set_has_uiframetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SMuxFrameInfo::clear_has_uiframetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SMuxFrameInfo::clear_uiframetime() {
  uiframetime_ = 0u;
  clear_has_uiframetime();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uiframetime() const {
  return uiframetime_;
}
inline void SMuxFrameInfo::set_uiframetime(::google::protobuf::uint32 value) {
  set_has_uiframetime();
  uiframetime_ = value;
}

// optional uint32 uiOriginalVideoId = 16;
inline bool SMuxFrameInfo::has_uioriginalvideoid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SMuxFrameInfo::set_has_uioriginalvideoid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SMuxFrameInfo::clear_has_uioriginalvideoid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SMuxFrameInfo::clear_uioriginalvideoid() {
  uioriginalvideoid_ = 0u;
  clear_has_uioriginalvideoid();
}
inline ::google::protobuf::uint32 SMuxFrameInfo::uioriginalvideoid() const {
  return uioriginalvideoid_;
}
inline void SMuxFrameInfo::set_uioriginalvideoid(::google::protobuf::uint32 value) {
  set_has_uioriginalvideoid();
  uioriginalvideoid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace muxsvr_protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_muxsvr_2eproto__INCLUDED
